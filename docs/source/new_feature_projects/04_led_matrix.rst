.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones festivas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _new_led_matrix:

Matriz LED de 12x8
========================================

El Arduino UNO R4 WiFi viene con una matriz LED integrada de 12x8 que se puede programar para mostrar una variedad de gr√°ficos, animaciones, actuar como una interfaz o incluso facilitar experiencias de juego.

.. image:: img/unor4wifi.webp
    :width: 60%

En esta gu√≠a, proporcionamos un ejemplo sencillo para ayudarte a mostrar tu patr√≥n deseado en la matriz LED.

C√≥mo almacenar datos de la matriz LED en Arduino
-------------------------------------------------------

Para utilizar la matriz LED, necesitar√°s la biblioteca ``Arduino_LED_Matrix``, que se instala junto con el n√∫cleo Renesas.

La biblioteca de la matriz LED para el UNO R4 WiFi funciona creando y cargando fotogramas en un b√∫fer para mostrarlos. Un fotograma, tambi√©n conocido como "image", representa lo que se muestra actualmente en la matriz. En una animaci√≥n compuesta por varias im√°genes, cada image se considera un fotograma.

Para controlar la matriz LED de 12x8 en el UNO R4 WiFi, se requiere un m√≠nimo de 96 bits de espacio de memoria. La biblioteca ofrece dos enfoques para esto.

**Un enfoque utiliza una matriz bidimensional**, con ceros y unos para representar si el LED correspondiente est√° apagado o encendido. Cada n√∫mero corresponde a un LED en la matriz LED. La siguiente matriz ilustra un patr√≥n en forma de coraz√≥n.

.. code-block:: arduino
   
   // Usa una matriz bidimensional para representar una matriz LED de 12x8.
   byte frame[8][12] = {
     { 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0 },
     { 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0 },
     { 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
     { 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
     { 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0 },
     { 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0 },
     { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
     { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
   };

**Otro enfoque emplea una matriz de enteros de 32 bits** para mantener el estado de la matriz LED. Este m√©todo es m√°s compacto pero ligeramente m√°s complejo. Cada ``unsigned long`` almacena 32 bits. Por lo tanto, para una matriz LED de 12x8, que contiene 96 LEDs, necesitar√°s al menos tres variables ``unsigned long``.

1. Cada ``unsigned long`` contiene 32 bits, y puedes pensar en estos bits como el estado de una parte espec√≠fica en una matriz LED.
2. Estas variables ``unsigned long`` forman una matriz que encapsula el estado completo de la matriz LED.

Aqu√≠ hay un fragmento de c√≥digo que utiliza tres variables `unsigned long` para representar una matriz LED de 12x8.

.. code-block:: arduino

   // Usa una matriz de enteros de 32 bits para almacenar la matriz LED.
   unsigned long frame[] = {
     0x3184a444, // Estado de los primeros 32 LEDs
     0x42081100, // Estado de los siguientes 32 LEDs
     0xa0040000  // Estado de los √∫ltimos 32 LEDs
   };

Para visualizar mejor los estados de los LEDs, estos valores se pueden convertir en forma binaria, donde cada bit representa secuencialmente el estado de cada LED de izquierda a derecha y de arriba a abajo. Un 0 indica apagado y un 1 indica encendido.

.. code-block:: arduino

   0x3184a444 -> 110001100001001010010001000100
   0x42081100 -> 1000010000010000001000100000000
   0xa0040000 -> 10100000000001000000000000000000

Mostrar patr√≥n en la matriz LED
-----------------------------------------

Una vez que tu patr√≥n est√© listo, el siguiente paso es transmitir estos datos a la matriz LED de 12x8. Esto generalmente implica invocar funciones de la biblioteca y pasar la matriz o variables que contienen los estados de los LEDs a estas funciones.

1. Usando una matriz bidimensional

   Para mostrar el patr√≥n almacenado en una matriz 2D, puedes usar el siguiente c√≥digo:
   
   .. code-block:: arduino
   
      #include <Arduino_LED_Matrix.h>
   
      ArduinoLEDMatrix matrix;
   
      // Matriz 2D predefinida
      byte frame[8][12] = {
           { 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0 },
           { 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0 },
           { 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
           { 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
           { 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0 },
           { 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0 },
           { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
      };
   
      void setup() {
        // Inicializar la matriz LED
        matrix.begin();
      }
   
      void loop() {
        // Mostrar el patr√≥n en la matriz LED
        matrix.renderBitmap(frame, 8, 12);
        delay(1000);
      }
   
   En este c√≥digo, utilizamos la funci√≥n ``matrix.renderBitmap(frame, 8, 12);`` para mostrar la matriz LED. Aqu√≠, 8 y 12 representan respectivamente las filas y columnas de la matriz LED.

2. Usando una matriz de enteros de 32 bits
   
   Para mostrar el patr√≥n almacenado en una matriz de ``unsigned long``, utiliza el siguiente c√≥digo:
   
   .. code-block:: arduino
   
      #include "Arduino_LED_Matrix.h"
      
      ArduinoLEDMatrix matrix;
      
      void setup() {
        matrix.begin();
      }
      
      const uint32_t heart[] = {
          0x3184a444,
          0x44042081,
          0x100a0040
      };
        
      void loop(){
        matrix.loadFrame(heart);
        delay(500);
      }
   
   En este caso, necesitamos utilizar la funci√≥n ``matrix.loadFrame(heart)`` para mostrar el patr√≥n en la matriz LED.


Editor de Matriz LED de Arduino
-----------------------------------------

Recomiendo utilizar una matriz ``unsigned long`` para almacenar el estado de la matriz LED, ya que ahorra memoria en el Arduino. Aunque este m√©todo puede no ser muy intuitivo, puedes usar el |link_led_matrix_editor| como ayuda, lo que te ayudar√° a generar una matriz ``unsigned long``.

Con el |link_led_matrix_editor| y la biblioteca ``Arduino_LED_Matrix``, puedes crear √≠conos o animaciones de manera conveniente y mostrarlas en la placa UNO R4 WiFi. Todo lo que tienes que hacer es dibujar, descargar el archivo ``.h`` y llamar a la funci√≥n ``matrix.play()`` en tu boceto para construir f√°cilmente tu pr√≥ximo proyecto.



#. Abre el Editor de Matriz LED

   .. image:: img/04_led_matrix_editor_1.png
     :width: 80%

#. Dibuja tu patr√≥n en el lienzo central

   .. image:: img/04_led_matrix_editor_2.png
     :width: 80%

#. Establece el intervalo de fotogramas en milisegundos

   .. image:: img/04_led_matrix_editor_3.png
     :width: 80%

#. Puedes crear un nuevo fotograma en blanco o copiar y crear un nuevo fotograma a partir del fotograma actual.

   .. image:: img/04_led_matrix_editor_4.png
     :width: 80%

#. Exporta el archivo de encabezado ``.h``

   .. image:: img/04_led_matrix_editor_5.png
     :width: 80%

   .. image:: img/04_led_matrix_editor_6.png

   Despu√©s de hacer clic en OK, recibir√°s un archivo llamado ``animation.h``.


Mostrar Animaciones
-----------------------------------------

En los pasos anteriores, obtuvimos un archivo ``.h`` que almacena una serie de fotogramas junto con sus duraciones. A continuaci√≥n, vamos a mostrarlos en la matriz LED.

#. Primero, crea un boceto. Puedes abrir el archivo ``04-led_matrix.ino`` ubicado en la ruta ``elite-explorer-kit-main\r4_new_feature\04-led_matrix``, o copiar este c√≥digo en el **Arduino IDE**.

   .. raw:: html

      <iframe src=https://create.arduino.cc/editor/sunfounder01/f3712371-7c3d-4a4b-bd98-f74fe43269ed/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


#. Si est√°s utilizando el c√≥digo de la ruta ``elite-explorer-kit-main\r4_new_feature\04-led_matrix``, encontrar√°s una pesta√±a llamada ``animation.h`` en el Arduino IDE. √Åbrela y reemplaza el c√≥digo existente con el archivo .h que obtuviste del sitio web.

   .. image:: img/04_animation_h_file.png
     :width: 80%

#. Si has creado tu propio boceto, necesitas copiar el archivo ``.h`` obtenido de la p√°gina web al mismo directorio del boceto.

#. Despu√©s de configurar tu c√≥digo preferido en el Arduino IDE y cargarlo en tu Arduino UNO R4 WiFi, tu matriz LED deber√≠a mostrar el patr√≥n que definiste.

   .. raw:: html
   
      <video loop autoplay muted style = "max-width:100%">
         <source src="../_static/videos/new_feature_projects/led_matrix.mp4"  type="video/mp4">
         Your browser does not support the video tag.
      </video>

   ¬°Felicidades! Has programado con √©xito la matriz LED de 12x8 de tu Arduino UNO R4 WiFi.


**Referencia**

- |link_r4_led|

**M√°s Proyectos**

* :ref:`fun_snake` (Fun Project)



