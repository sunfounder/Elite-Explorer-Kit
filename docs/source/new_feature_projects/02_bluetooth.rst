.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones festivas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _new_bluetooth:

Bluetooth
========================================

Equipado con el m√≥dulo ESP32, la placa UNO R4 WiFi ofrece funcionalidades de Bluetooth¬Æ LE y Bluetooth¬Æ 5, soportando velocidades de hasta 2 Mbps. El m√≥dulo ESP32 viene con una antena de traza integrada, eliminando la necesidad de una antena externa para aprovechar las caracter√≠sticas de conectividad de la placa.

.. note::
    La antena de traza en el m√≥dulo ESP32 se comparte con el m√≥dulo Bluetooth¬Æ, lo que significa que no se puede usar Bluetooth¬Æ y Wi-Fi¬Æ al mismo tiempo.

Conceptos B√°sicos de BLE
++++++++++++++++++++++++++++

**Bluetooth Low Energy (BLE)** es una tecnolog√≠a de comunicaci√≥n inal√°mbrica de baja potencia, dise√±ada espec√≠ficamente para interacciones de corto alcance. A diferencia del Bluetooth cl√°sico, BLE se enfoca en la eficiencia energ√©tica y la conexi√≥n r√°pida, lo que la hace ideal para una variedad de aplicaciones, incluidos los dispositivos del Internet de las Cosas (IoT) y los equipos de monitoreo de salud.

Las comunicaciones BLE se basan en dos protocolos clave: **GATT (Generic Attribute Profile)** y **GAP (Generic Access Profile)**. GATT se utiliza para el intercambio de datos, mientras que GAP se encarga del descubrimiento de dispositivos y la conexi√≥n.

.. image:: img/02_ble_relationships.png
 :width: 100%


Dispositivos Perif√©ricos (Normalmente Servidores GATT)
----------------------------------------------------------

En la red BLE, los **dispositivos perif√©ricos** principalmente transmiten datos para ser descubiertos y accesados por dispositivos centrales (que suelen actuar como clientes GATT). Estos dispositivos son usualmente sensores o hardware peque√±o como monitores de ritmo card√≠aco, sensores de temperatura o bombillas inteligentes.

En el modelo de comunicaci√≥n BLE, los dispositivos perif√©ricos suelen proporcionar uno o m√°s **servicios**, cada uno de los cuales contiene un conjunto de **caracter√≠sticas**. Estos servicios y caracter√≠sticas colaboran para habilitar funcionalidades espec√≠ficas o casos de uso, permitiendo que los dispositivos centrales lean o manipulen los datos relevantes.

- **Servicios**

  En BLE, los servicios act√∫an como abstracciones de alto nivel utilizadas para organizar y encapsular caracter√≠sticas relacionadas. Los servicios en BLE pueden categorizarse en servicios est√°ndar y servicios personalizados seg√∫n su origen y prop√≥sito.

  - Servicios Est√°ndar: Definidos por el SIG de Bluetooth (Special Interest Group), est√°n destinados a funciones espec√≠ficas. Por ejemplo, el servicio de ritmo card√≠aco para monitores de ritmo card√≠aco, el servicio de informaci√≥n del dispositivo que proporciona detalles del fabricante, modelo y versi√≥n, y el servicio de bater√≠a que indica el nivel y estado de la bater√≠a.
  - Servicios Personalizados: Definidos por desarrolladores o fabricantes de dispositivos para satisfacer las necesidades de aplicaciones o dispositivos espec√≠ficos. Por ejemplo, un fabricante de dispositivos para el hogar inteligente podr√≠a definir un servicio personalizado para controlar el color y el brillo de la luz.

- **Caracter√≠sticas**

  Las caracter√≠sticas en BLE son las unidades fundamentales de datos expuestas por los dispositivos perif√©ricos. Est√°n contenidas dentro de un servicio y definen varios tipos de datos y las operaciones que se pueden realizar sobre ellos. Cada caracter√≠stica est√° identificada por un UUID y tiene un conjunto de atributos asociados como valor, descriptor y permisos.

  - Permisos: En BLE, cada caracter√≠stica est√° asociada con un conjunto de permisos que dictan si la caracter√≠stica es legible, escribible o notificable. Esto ayuda a proteger los datos y definir c√≥mo interactuar con ellos.

- **UUID**

  Los servicios, caracter√≠sticas y descriptores se identifican colectivamente como atributos, cada uno con un UUID √∫nico. El SIG de Bluetooth ha reservado un conjunto de UUIDs para atributos est√°ndar. Estos UUIDs generalmente se representan como identificadores de 16 bits o 32 bits en el protocolo BLE por eficiencia, en lugar de los 128 bits requeridos para un UUID completo. Por ejemplo, el servicio de informaci√≥n del dispositivo se representa con el c√≥digo corto 0x180A.



Dispositivos Centrales (Normalmente Clientes GATT)
----------------------------------------------------

Los **dispositivos centrales** en la red BLE escanean dispositivos perif√©ricos cercanos y establecen conexiones para adquirir o controlar datos. Estos dispositivos son generalmente m√°s complejos y ricos en funciones, como tel√©fonos inteligentes, tabletas o hardware de puerta de enlace especializado. Son responsables de descubrir dispositivos perif√©ricos, conectarse a ellos y acceder o suscribirse a los servicios y caracter√≠sticas ofrecidos por los perif√©ricos para servir diversas aplicaciones o resolver problemas espec√≠ficos.

Los dispositivos centrales interact√∫an con las caracter√≠sticas de las siguientes maneras:

- **Leer**: Solicita al dispositivo perif√©rico que env√≠e el valor actual de una caracter√≠stica. Esto se usa com√∫nmente para caracter√≠sticas que no cambian a menudo, como configuraciones o n√∫meros de versi√≥n.
- **Escribir**: Modifica el valor de una caracter√≠stica, t√≠picamente utilizado para operaciones de comando, como instruir a un dispositivo perif√©rico para encender o apagar un motor.
- **Suscribirse**: Solicita al dispositivo perif√©rico que env√≠e continuamente valores actualizados de una caracter√≠stica, eliminando la necesidad de que el dispositivo central solicite repetidamente estos datos.



Ejemplo: LED Controlado por Bluetooth
++++++++++++++++++++++++++++++++++++++++++++++++++++++++

En este ejemplo, el Arduino act√∫a como un dispositivo perif√©rico en una red Bluetooth Low Energy (BLE). Ofrece un servicio BLE personalizado dise√±ado para controlar un LED integrado. Este servicio incluye una caracter√≠stica que puede ser le√≠da y escrita por un dispositivo central, como un tel√©fono inteligente. Una vez que el dispositivo central se conecta al Arduino, puede cambiar el estado del LED escribiendo en esta caracter√≠stica. El monitor serial del Arduino muestra informaci√≥n de depuraci√≥n, incluido el estado actual del LED y la direcci√≥n MAC del dispositivo central conectado.

**Cargar el C√≥digo**

Abre el archivo ``02-bluetooth.ino`` ubicado en ``elite-explorer-kit-main\r4_new_feature\02-bluetooth``, o pega el siguiente c√≥digo en tu IDE de Arduino.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/44d76bb7-9f0a-4004-b3fe-9a88999c5f06/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


**Conectar Arduino R4 a trav√©s de Bluetooth**

Para interactuar con los servicios y caracter√≠sticas creados en este boceto, deber√≠amos utilizar una aplicaci√≥n central gen√©rica de Bluetooth¬Æ Low Energy como LightBlue (disponible para iOS y Android) o nRF Connect (para Android).

Tomemos LightBlue como ejemplo para demostrar c√≥mo controlar el LED del Arduino a trav√©s de Bluetooth.

1. Descarga la aplicaci√≥n **LightBlue** desde |link_lightblue_apple| (para iOS) o |link_lightblue_google| (para Android).

   .. image:: img/02_lightblue.png
    :width: 90%

   .. raw:: html

      <br/><br/>

2. Conectar Arduino con tu Smartphone v√≠a Bluetooth
   
   Navega a la configuraci√≥n de Bluetooth y localiza el dispositivo llamado "UNO R4 LED". Procede a conectarte a √©l.

   .. image:: img/02_connect.png
    :width: 90%

   .. raw:: html

      <br/>

3. Interactuar con Arduino v√≠a Bluetooth Usando LightBlue

   Abre LightBlue y toca en la pesta√±a **Bonded** ubicada en la parte inferior de la interfaz. Aqu√≠ ver√°s una lista de dispositivos BLE que tu smartphone ha emparejado previamente. Localiza **UNO R4 LED** y toca en **CONNECT**.

   .. image:: img/02_lightblue_1.png
    :width: 90%

   Una vez conectado, obtendr√°s acceso a informaci√≥n detallada sobre el dispositivo Bluetooth "UNO R4 LED". Despl√°zate hacia abajo para encontrar "ledService (**19B10000-E8F2-537E-4F6C-D104768A1214**)" y "switchCharacteristic (**19B10001-E8F2-537E-4F6C-D104768A1214**)".

   Toca en la Caracter√≠stica 19B10001-E8F2-537E-4F6C-D104768A1214. noter√°s que esta Caracter√≠stica es tanto legible como escribible, permiti√©ndote leer y escribir en ella.
  
   .. image:: img/02_lightblue_2.png
    :width: 90%

   Sigue desplaz√°ndote hasta la secci√≥n **WRITTEN VALUES**. Ingresa '**1**' en el cuadro de texto para establecer el valor de la Caracter√≠stica en 1, lo que **encender√° el LED integrado del Arduino R4**.

   .. image:: img/02_lightblue_3.png
    :width: 90%

   Del mismo modo, puedes establecer este valor en '**0**' para **apagar el LED integrado**.

   .. image:: img/02_lightblue_4.png
    :width: 90%



**Explicaci√≥n del C√≥digo**

#. Inicializar BLE y LED

   .. note::
      Al definir servicios y caracter√≠sticas, necesitamos usar UUIDs para identificarlos. Para evitar conflictos de UUID y facilitarte su uso, puedes usar la herramienta de generaci√≥n de UUID en |link_uuid_gen_tool|.

   .. code-block:: arduino
   
      #include <ArduinoBLE.h>
      BLEService ledService("19B10000-E8F2-537E-4F6C-D104768A1214"); // Servicio de LED para Bluetooth¬Æ Low Energy
      BLEByteCharacteristic switchCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
      const int ledPin = LED_BUILTIN; // pin para usar con el LED

   - Incluye la biblioteca ArduinoBLE.
   - Define el servicio BLE y la caracter√≠stica.
   - Asigna el pin del LED integrado a ``ledPin``.

   .. raw:: html

      <br/>

#. Funci√≥n ``setup()``

   .. code-block:: arduino
   
      void setup() {
        Serial.begin(9600);
        while (!Serial);
        pinMode(ledPin, OUTPUT);
        if (!BLE.begin()) {
          Serial.println("starting Bluetooth¬Æ Low Energy module failed!");
          while (1);
        }
        BLE.setLocalName("UNO R4 LED");
        BLE.setAdvertisedService(ledService);
        ledService.addCharacteristic(switchCharacteristic);
        BLE.addService(ledService);
        switchCharacteristic.writeValue(0);
        BLE.advertise();
        Serial.println("BLE LED Peripheral");
      }

   - Inicializa la comunicaci√≥n serial.
   - Configura el pin del LED como salida.
   - Inicializa BLE y agrega el servicio y las caracter√≠sticas.
   - Inicia la publicidad de BLE.

   .. raw:: html

      <br/>

#. Funci√≥n ``loop()``

   .. code-block:: arduino
   
      void loop() {
        BLEDevice central = BLE.central();
        if (central) {
          Serial.print("Connected to central: ");
          Serial.println(central.address());
          while (central.connected()) {
            if (switchCharacteristic.written()) {
              if (switchCharacteristic.value()) {
                Serial.println("LED on");
                digitalWrite(ledPin, HIGH);
              } else {
                Serial.println("LED off");
                digitalWrite(ledPin, LOW);
              }
            }
          }
          Serial.print("Disconnected from central: ");
          Serial.println(central.address());
        }
      }
   

   - Escucha a dispositivos centrales BLE para conectarse.
   - Si un dispositivo central se conecta, lee el valor de la caracter√≠stica para controlar el LED. Si se recibe un valor distinto de 0, enciende el LED. Si se recibe 0, apaga el LED.


**Referencia**

- |link_r4_bluetooth|
