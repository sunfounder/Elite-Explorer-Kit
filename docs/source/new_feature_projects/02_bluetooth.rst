.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _new_bluetooth:

Bluetooth
========================================

Ausgestattet mit dem ESP32-Modul bietet das UNO R4 WiFi-Board sowohl Bluetooth¬Æ LE als auch Bluetooth¬Æ 5-Funktionalit√§ten und unterst√ºtzt Geschwindigkeiten von bis zu 2 Mbps. Das ESP32-Modul kommt mit einer integrierten Trace-Antenne, was die Notwendigkeit einer externen Antenne zur Nutzung der Konnektivit√§tsfunktionen des Boards √ºberfl√ºssig macht.

.. note::
    Die Trace-Antenne im ESP32-Modul wird mit dem Bluetooth¬Æ-Modul geteilt, was bedeutet, dass Sie Bluetooth¬Æ und Wi-Fi¬Æ nicht gleichzeitig verwenden k√∂nnen.

Grundkonzepte von BLE
++++++++++++++++++++++++

**Bluetooth Low Energy (BLE)** ist eine energiesparende drahtlose Kommunikationstechnologie, die speziell f√ºr Kurzstreckeninteraktionen entwickelt wurde. Im Unterschied zu klassischem Bluetooth konzentriert sich BLE auf Energieeffizienz und schnelle Verbindung, was es zu einer idealen Wahl f√ºr eine Reihe von Anwendungen wie Internet-of-Things (IoT)-Ger√§te und Gesundheits√ºberwachungsausr√ºstung macht.

BLE-Kommunikationen basieren auf zwei Schl√ºsselprotokollen: **GATT (Generic Attribute Profile)** und **GAP (Generic Access Profile)**. GATT wird f√ºr den Datenaustausch verwendet, w√§hrend GAP f√ºr die Ger√§teerkennung und -verbindung verantwortlich ist.

.. image:: img/02_ble_relationships.png
 :width: 100%


Peripherieger√§te (typischerweise GATT-Server)
--------------------------------------------------

Im BLE-Netzwerk √ºbertragen **peripheral devices** haupts√§chlich Daten, um von zentralen Ger√§ten (typischerweise als GATT-Clients agierend) entdeckt und darauf zugegriffen zu werden. Solche Ger√§te sind in der Regel Sensoren oder kleine Hardware wie Herzfrequenzmesser, Temperatursensoren oder intelligente Gl√ºhbirnen.

Im BLE-Kommunikationsmodell bieten Peripherieger√§te h√§ufig einen oder mehrere **services** an, die jeweils eine Reihe von **Ccharacteristics** enthalten. Diese Dienste und Charakteristiken erm√∂glichen gemeinsam spezifische Funktionalit√§ten oder Anwendungsf√§lle, die es zentralen Ger√§ten erlauben, relevante Daten zu lesen oder zu manipulieren.

- **Services**

  In BLE fungieren Dienste als hochrangige Abstraktionen, die verwendet werden, um verwandte Charakteristiken zu organisieren und einzukapseln. Dienste in BLE k√∂nnen in Standarddienste und benutzerdefinierte Dienste eingeteilt werden, abh√§ngig von ihrer Herkunft und ihrem Zweck.

  - Standarddienste: Definiert von der Bluetooth SIG (Bluetooth Special Interest Group), sind diese f√ºr spezifische Funktionen gedacht. Zum Beispiel der Herzfrequenzdienst f√ºr Herzfrequenzmesser, der Ger√§teinformationsdienst, der Hersteller-, Modell- und Versionsdetails bereitstellt, und der Batteriedienst, der den Batteriestand und -status anzeigt.
  - Benutzerdefinierte Dienste: Diese werden von Entwicklern oder Ger√§teherstellern definiert, um die Anforderungen spezifischer Anwendungen oder Ger√§te zu erf√ºllen. Beispielsweise k√∂nnte ein Hersteller von Smart-Home-Ger√§ten einen benutzerdefinierten Dienst definieren, um die Farbe und Helligkeit des Lichts zu steuern.

- **Characteristics**

  Charakteristiken in BLE sind die grundlegenden Dateneinheiten, die von den Peripherieger√§ten bereitgestellt werden. Sie sind innerhalb eines Dienstes enthalten und definieren verschiedene Datentypen und die Operationen, die an ihnen durchgef√ºhrt werden k√∂nnen. Jede Charakteristik wird durch eine UUID identifiziert und hat eine Reihe von zugeh√∂rigen Attributen wie Wert, Beschreibung und Berechtigungen.

  - Berechtigungen: In BLE ist jede Charakteristik mit einem Satz von Berechtigungen verbunden, die bestimmen, ob die Charakteristik lesbar, beschreibbar oder benachrichtigungsf√§hig ist. Dies hilft, die Daten zu sichern und zu definieren, wie mit ihnen interagiert wird.

- **UUID**

  Dienste, Charakteristiken und Beschreiber werden kollektiv als Attribute identifiziert, wobei jedes ein einzigartiges UUID besitzt. Die Bluetooth SIG hat eine Reihe von UUIDs f√ºr Standardattribute reserviert. Diese UUIDs werden im BLE-Protokoll normalerweise als 16-Bit- oder 32-Bit-Identifikatoren dargestellt, um Effizienz zu gew√§hrleisten, anstatt der 128 Bit, die f√ºr eine vollst√§ndige UUID erforderlich w√§ren. Zum Beispiel wird der Dienst f√ºr Ger√§teinformationen durch den Kurzcode 0x180A repr√§sentiert.



Central Devices (Typically GATT Clients)
--------------------------------------------------

**Central devices** im BLE-Netzwerk suchen nach nahegelegenen Peripherieger√§ten und stellen Verbindungen her, um Daten zu erwerben oder zu steuern. Diese Ger√§te sind in der Regel komplexer und funktionsreicher, wie Smartphones, Tablets oder spezialisierte Gateway-Hardware. Sie sind verantwortlich f√ºr das Auffinden von Peripherieger√§ten, deren Verbindung und den Zugriff oder das Abonnieren von Diensten und Charakteristiken, die von den Peripherieger√§ten angeboten werden, um verschiedene Anwendungen zu bedienen oder spezifische Probleme zu l√∂sen.

Zentrale Ger√§te interagieren auf folgende Weise mit Charakteristiken:

- **Lesen**: Fordert das Peripherieger√§t auf, den aktuellen Wert einer Charakteristik zu senden. Dies wird h√§ufig f√ºr Charakteristiken verwendet, die sich nicht oft √§ndern, wie Konfigurationseinstellungen oder Versionsnummern.
- **Schreiben**: √Ñndern Sie den Wert einer Charakteristik, typischerweise verwendet f√ºr befehls√§hnliche Operationen, wie das Anweisen eines Peripherieger√§ts, einen Motor ein- oder auszuschalten.
- **Abonnieren**: Fordert das Peripherieger√§t auf, kontinuierlich aktualisierte Werte einer Charakteristik zu senden und eliminiert die Notwendigkeit f√ºr das zentrale Ger√§t, diese Daten wiederholt anzufordern.



Beispiel: Bluetooth-gesteuerte LED
++++++++++++++++++++++++++++++++++++++++++++++++++++++++

In diesem Beispiel fungiert das Arduino als Peripherieger√§t in einem Bluetooth Low Energy (BLE)-Netzwerk. Es bietet einen benutzerdefinierten BLE-Dienst an, der zur Steuerung einer Onboard-LED entwickelt wurde. Dieser Dienst beinhaltet eine Charakteristik, die von einem zentralen Ger√§t, wie einem Smartphone, gelesen und beschrieben werden kann. Sobald das zentrale Ger√§t eine Verbindung zum Arduino herstellt, kann es den LED-Status durch Schreiben dieser Charakteristik √§ndern. Der serielle Monitor des Arduino zeigt Debugging-Informationen an, einschlie√ülich des aktuellen Zustands der LED und der MAC-Adresse des verbundenen zentralen Ger√§ts.

**Code hochladen**

√ñffnen Sie die Datei ‚Äû02-bluetooth.ino‚Äú, die sich unter ‚Äûelite-explorer-kit-main\r4_new_feature\02-bluetooth‚Äú befindet, oder f√ºgen Sie den folgenden Code in Ihre Arduino IDE ein.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/44d76bb7-9f0a-4004-b3fe-9a88999c5f06/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


**Verbindung des Arduino R4 √ºber Bluetooth**

Um mit den in diesem Sketch erstellten Diensten und Charakteristiken zu interagieren, sollten wir eine generische Bluetooth¬Æ Low Energy Central App wie LightBlue (verf√ºgbar f√ºr iOS und Android) oder nRF Connect (f√ºr Android) nutzen.

Wir nehmen LightBlue als Beispiel, um zu demonstrieren, wie man die LED des Arduino √ºber Bluetooth steuert.

1. Laden Sie die **LightBlue**-App aus dem |link_lightblue_apple| (f√ºr iOS) oder |link_lightblue_google| (f√ºr Android) herunter.

   .. image:: img/02_lightblue.png
    :width: 90%

   .. raw:: html

      <br/><br/>

2. Verbindung des Arduino mit Ihrem Smartphone √ºber Bluetooth
   
   Gehen Sie zu Ihren Bluetooth-Einstellungen und suchen Sie das Ger√§t namens ‚ÄûUNO R4 LED‚Äú. Verbinden Sie sich damit.

   .. image:: img/02_connect.png
    :width: 90%

   .. raw:: html

      <br/>

3. Interaktion mit dem Arduino √ºber Bluetooth mit LightBlue

   Starten Sie LightBlue und tippen Sie auf den Tab **Bonded** unten in der Schnittstelle. Hier sehen Sie eine Liste der BLE-Ger√§te, mit denen Ihr Smartphone zuvor gekoppelt wurde. Suchen Sie nach **UNO R4 LED** und tippen Sie auf **CONNECT**.

   .. image:: img/02_lightblue_1.png
    :width: 90%

   Einmal verbunden, erhalten Sie Zugriff auf detaillierte Informationen √ºber das Bluetooth-Ger√§t ‚ÄûUNO R4 LED‚Äú. Scrollen Sie nach unten, um ‚ÄûledService (**19B10000-E8F2-537E-4F6C-D104768A1214**)‚Äú und ‚ÄûswitchCharacteristic (**19B10001-E8F2-537E-4F6C-D104768A1214**)‚Äú zu finden.

   Tippen Sie auf die Charakteristik 19B10001-E8F2-537E-4F6C-D104768A1214. Sie werden feststellen, dass diese Charakteristik sowohl lesbar als auch beschreibbar ist, sodass Sie sowohl von ihr lesen als auch auf sie schreiben k√∂nnen.
  
   .. image:: img/02_lightblue_2.png
    :width: 90%

   Scrollen Sie weiter zum Abschnitt **WRITTEN VALUES**. Geben Sie **‚Äû1‚Äú** in das Textfeld ein, um den Charakteristikwert auf 1 zu setzen, was die **eingebaute LED des Arduino R4 einschaltet**.

   .. image:: img/02_lightblue_3.png
    :width: 90%

   Ebenso k√∂nnen Sie diesen Wert auf **‚Äû0‚Äú** setzen, um die **eingebaute LED auszuschalten**.

   .. image:: img/02_lightblue_4.png
    :width: 90%



**Code-Erkl√§rung**

#. BLE und LED initialisieren

   .. note::
      Beim Definieren von Diensten und Charakteristiken m√ºssen wir UUIDs verwenden, um sie zu identifizieren. Um UUID-Konflikte zu vermeiden und die Nutzung f√ºr Sie zu erleichtern, k√∂nnen Sie das UUID-Generierungstool unter |link_uuid_gen_tool| verwenden.

   .. code-block:: arduino
   
      #include <ArduinoBLE.h>
      BLEService ledService("19B10000-E8F2-537E-4F6C-D104768A1214"); // Bluetooth¬Æ Low Energy LED Service
      BLEByteCharacteristic switchCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
      const int ledPin = LED_BUILTIN; // pin to use for the LED

   - Die ArduinoBLE-Bibliothek einbinden.
   - Den BLE-Dienst und die Charakteristik definieren.
   - Den eingebauten LED-Pin mit ``ledPin`` zuweisen.

   .. raw:: html

      <br/>

#. Funktion ``setup()``

   .. code-block:: arduino
   
      void setup() {
        Serial.begin(9600);
        while (!Serial);
        pinMode(ledPin, OUTPUT);
        if (!BLE.begin()) {
          Serial.println("starting Bluetooth¬Æ Low Energy module failed!");
          while (1);
        }
        BLE.setLocalName("UNO R4 LED");
        BLE.setAdvertisedService(ledService);
        ledService.addCharacteristic(switchCharacteristic);
        BLE.addService(ledService);
        switchCharacteristic.writeValue(0);
        BLE.advertise();
        Serial.println("BLE LED Peripheral");
      }

   - Serielle Kommunikation initialisieren.
   - Den LED-Pin als Ausgang setzen.
   - BLE initialisieren und den Dienst sowie die Charakteristiken hinzuf√ºgen.
   - BLE-Werbung starten.

   .. raw:: html

      <br/>

#. ``loop()`` Function

   .. code-block:: arduino
   
      void loop() {
        BLEDevice central = BLE.central();
        if (central) {
          Serial.print("Connected to central: ");
          Serial.println(central.address());
          while (central.connected()) {
            if (switchCharacteristic.written()) {
              if (switchCharacteristic.value()) {
                Serial.println("LED on");
                digitalWrite(ledPin, HIGH);
              } else {
                Serial.println("LED off");
                digitalWrite(ledPin, LOW);
              }
            }
          }
          Serial.print("Disconnected from central: ");
          Serial.println(central.address());
        }
      }
   
   - Auf Verbindungen von BLE-Zentralger√§ten lauschen.
   - Wenn ein Zentralger√§t verbunden ist, den Charakteristikwert lesen, um die LED zu steuern. Wenn ein Wert ungleich 0 empfangen wird, die LED einschalten. Wenn 0 empfangen wird, die LED ausschalten.

**Referenz**

- |link_r4_bluetooth|
