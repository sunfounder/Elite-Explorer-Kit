.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _new_bluetooth:

Bluetooth
========================================

√âquip√©e du module ESP32, la carte UNO R4 WiFi offre √† la fois les fonctionnalit√©s Bluetooth¬Æ LE et Bluetooth¬Æ 5, supportant des vitesses allant jusqu'√† 2 Mbps. Le module ESP32 est dot√© d'une antenne trace int√©gr√©e, √©liminant le besoin d'une antenne externe pour profiter des fonctionnalit√©s de connectivit√© de la carte.

.. note::
    L'antenne trace du module ESP32 est partag√©e avec le module Bluetooth¬Æ, ce qui signifie que vous ne pouvez pas utiliser le Bluetooth¬Æ et le Wi-Fi¬Æ en m√™me temps.

Concepts de base du BLE
++++++++++++++++++++++++

**Bluetooth Low Energy (BLE)** est une technologie de communication sans fil √† faible consommation d'√©nergie, con√ßue sp√©cifiquement pour les interactions √† courte port√©e. Distingu√©e du Bluetooth classique, le BLE se concentre sur l'efficacit√© √©nerg√©tique et la connexion rapide, ce qui en fait un choix id√©al pour une gamme d'applications, y compris les dispositifs de l'Internet des objets (IoT) et les √©quipements de surveillance de la sant√©.

Les communications BLE reposent sur deux protocoles cl√©s : **GATT (Generic Attribute Profile)** et **GAP (Generic Access Profile)**. GATT est utilis√© pour l'√©change de donn√©es, tandis que GAP est responsable de la d√©couverte et de la connexion des dispositifs.

.. image:: img/02_ble_relationships.png
 :width: 100%


Appareils p√©riph√©riques (Typiquement serveurs GATT)
--------------------------------------------------=====

Dans le r√©seau BLE, les **appareils p√©riph√©riques** diffusent principalement des donn√©es pour √™tre d√©couverts et accessibles par les appareils centraux (jouant g√©n√©ralement le r√¥le de clients GATT). Ces appareils sont g√©n√©ralement des capteurs ou des petits mat√©riels comme des moniteurs de fr√©quence cardiaque, des capteurs de temp√©rature ou des ampoules intelligentes.

Dans le mod√®le de communication BLE, les appareils p√©riph√©riques offrent souvent un ou plusieurs **services**, chacun contenant un ensemble de **caract√©ristiques**. Ces services et caract√©ristiques permettent des fonctionnalit√©s ou des cas d'utilisation sp√©cifiques, permettant aux appareils centraux de lire ou de manipuler les donn√©es pertinentes.

- **Services**

  Dans BLE, les services agissent comme des abstractions de haut niveau utilis√©es pour organiser et encapsuler les caract√©ristiques associ√©es. Les services dans BLE peuvent √™tre class√©s en services standard et services personnalis√©s en fonction de leur origine et de leur objectif.

  - Services standard : D√©finis par le Bluetooth SIG (Bluetooth Special Interest Group), ils sont destin√©s √† des fonctions sp√©cifiques. Par exemple, le service de fr√©quence cardiaque pour les moniteurs de fr√©quence cardiaque, le service d'information sur l'appareil fournissant des d√©tails sur le fabricant, le mod√®le et la version, et le service de batterie indiquant le niveau et l'√©tat de la batterie.
  - Services personnalis√©s : Ceux-ci sont d√©finis par les d√©veloppeurs ou les fabricants d'appareils pour r√©pondre aux exigences d'applications ou d'appareils sp√©cifiques. Par exemple, un fabricant de dispositifs domotiques pourrait d√©finir un service personnalis√© pour contr√¥ler la couleur et la luminosit√© des lumi√®res.

- **Caract√©ristiques**

  Les caract√©ristiques dans BLE sont les unit√©s fondamentales de donn√©es expos√©es par les appareils p√©riph√©riques. Elles sont enferm√©es dans un service et d√©finissent divers types de donn√©es et les op√©rations pouvant √™tre effectu√©es sur elles. Chaque caract√©ristique est identifi√©e par un UUID et poss√®de un ensemble d'attributs associ√©s tels que la valeur, le descripteur et les permissions.

  - Permissions : Dans BLE, chaque caract√©ristique est associ√©e √† un ensemble de permissions dictant si la caract√©ristique est lisible, inscriptible ou notifiable. Cela aide √† s√©curiser les donn√©es et √† d√©finir comment interagir avec elles.

- **UUID**

  Les services, les caract√©ristiques et les descripteurs sont collectivement identifi√©s comme des attributs, chacun ayant un UUID unique. Le Bluetooth SIG a r√©serv√© un ensemble d'UUID pour les attributs standard. Ces UUID sont g√©n√©ralement repr√©sent√©s sous forme d'identifiants de 16 bits ou de 32 bits dans le protocole BLE pour plus d'efficacit√©, plut√¥t que les 128 bits requis pour un UUID complet. Par exemple, le service d'information sur l'appareil est repr√©sent√© par le code court 0x180A.



Appareils centraux (Typiquement clients GATT)
--------------------------------------------------

Les **appareils centraux** dans le r√©seau BLE scannent les appareils p√©riph√©riques √† proximit√© et √©tablissent des connexions pour acqu√©rir ou contr√¥ler des donn√©es. Ces appareils sont g√©n√©ralement plus complexes et riches en fonctionnalit√©s, tels que les smartphones, les tablettes ou les mat√©riels passerelles sp√©cialis√©s. Ils sont responsables de la d√©couverte des appareils p√©riph√©riques, de la connexion √† ceux-ci, et de l'acc√®s ou de l'abonnement aux services et caract√©ristiques offerts par les p√©riph√©riques pour servir diverses applications ou r√©soudre des probl√®mes sp√©cifiques.

Les appareils centraux interagissent avec les caract√©ristiques de la mani√®re suivante :

- **Lire** : Demander √† l'appareil p√©riph√©rique d'envoyer la valeur actuelle d'une caract√©ristique. Cela est couramment utilis√© pour les caract√©ristiques qui ne changent pas souvent, comme les param√®tres de configuration ou les num√©ros de version.
- **√âcrire** : Modifier la valeur d'une caract√©ristique, g√©n√©ralement utilis√©e pour des op√©rations de type commande, comme demander √† un appareil p√©riph√©rique d'allumer ou d'√©teindre un moteur.
- **S'abonner** : Demander √† l'appareil p√©riph√©rique d'envoyer continuellement des valeurs mises √† jour d'une caract√©ristique, √©liminant ainsi le besoin pour l'appareil central de demander cette donn√©e √† plusieurs reprises.



Exemple : LED contr√¥l√©e par Bluetooth
++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Dans cet exemple, l'Arduino agit comme un appareil p√©riph√©rique dans un r√©seau Bluetooth Low Energy (BLE). Il offre un service BLE personnalis√© con√ßu pour contr√¥ler une LED embarqu√©e. Ce service comprend une caract√©ristique qui peut √™tre lue et √©crite par un appareil central, tel qu'un smartphone. Une fois que l'appareil central se connecte √† l'Arduino, il peut changer l'√©tat de la LED en √©crivant dans cette caract√©ristique. Le moniteur s√©rie de l'Arduino affiche des informations de d√©bogage, y compris l'√©tat actuel de la LED et l'adresse MAC de l'appareil central connect√©.

**T√©l√©charger le code**

Ouvrez le fichier ``02-bluetooth.ino`` situ√© dans ``elite-explorer-kit-main\r4_new_feature\02-bluetooth``, ou collez le code suivant dans votre IDE Arduino.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/44d76bb7-9f0a-4004-b3fe-9a88999c5f06/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


**Connecter l'Arduino R4 via Bluetooth**

Pour interagir avec les services et les caract√©ristiques cr√©√©s dans ce sketch, nous devons utiliser une application centrale Bluetooth¬Æ Low Energy g√©n√©rique telle que LightBlue (disponible pour iOS et Android) ou nRF Connect (pour Android).

Prenons LightBlue comme exemple pour d√©montrer comment contr√¥ler la LED de l'Arduino via Bluetooth.

1. T√©l√©chargez l'application **LightBlue** depuis le |link_lightblue_apple| (pour iOS) ou |link_lightblue_google| (pour Android).

   .. image:: img/02_lightblue.png
    :width: 90%

   .. raw:: html

      <br/><br/>

2. Connecter l'Arduino avec votre smartphone via Bluetooth
   
   Allez dans vos param√®tres Bluetooth et localisez l'appareil nomm√© "UNO R4 LED". Proc√©dez √† la connexion.

   .. image:: img/02_connect.png
    :width: 90%

   .. raw:: html

      <br/>

3. Interagir avec l'Arduino via Bluetooth en utilisant LightBlue

   Lancez LightBlue et appuyez sur l'onglet **Bonded** situ√© en bas de l'interface. Ici, vous verrez une liste des appareils BLE avec lesquels votre smartphone a √©t√© pr√©c√©demment appair√©. Localisez **UNO R4 LED** et appuyez sur **CONNECT**.

   .. image:: img/02_lightblue_1.png
    :width: 90%

   Une fois connect√©, vous acc√©derez aux informations d√©taill√©es sur l'appareil Bluetooth "UNO R4 LED". Faites d√©filer pour trouver "ledService (**19B10000-E8F2-537E-4F6C-D104768A1214**)" et "switchCharacteristic (**19B10001-E8F2-537E-4F6C-D104768A1214**)".

   Appuyez sur la caract√©ristique 19B10001-E8F2-537E-4F6C-D104768A1214. Vous remarquerez que cette caract√©ristique est √† la fois lisible et inscriptible, vous permettant de lire et d'√©crire des donn√©es.

   .. image:: img/02_lightblue_2.png
    :width: 90%

   Continuez √† faire d√©filer jusqu'√† la section **WRITTEN VALUES**. Saisissez '**1**' dans la zone de texte pour d√©finir la valeur de la caract√©ristique √† 1, ce qui **allumera la LED embarqu√©e de l'Arduino R4**.

   .. image:: img/02_lightblue_3.png
    :width: 90%

   De m√™me, vous pouvez d√©finir cette valeur √† '**0**' pour **√©teindre la LED embarqu√©e**.

   .. image:: img/02_lightblue_4.png
    :width: 90%



**Explication du code**

#. Initialiser BLE et LED

   .. note::
      Lors de la d√©finition des services et des caract√©ristiques, nous devons utiliser des UUID pour les identifier. Pour √©viter les conflits d'UUID et faciliter leur utilisation, vous pouvez utiliser l'outil de g√©n√©ration d'UUID √† |link_uuid_gen_tool|.

   .. code-block:: arduino
   
      #include <ArduinoBLE.h>
      BLEService ledService("19B10000-E8F2-537E-4F6C-D104768A1214"); // Service LED Bluetooth¬Æ Low Energy
      BLEByteCharacteristic switchCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
      const int ledPin = LED_BUILTIN; // broche √† utiliser pour la LED

   - Inclure la biblioth√®que ArduinoBLE.
   - D√©finir le service et la caract√©ristique BLE.
   - Assigner la broche LED int√©gr√©e √† ``ledPin``.

   .. raw:: html

      <br/>

#. Fonction ``setup()``

   .. code-block:: arduino
   
      void setup() {
        Serial.begin(9600);
        while (!Serial);
        pinMode(ledPin, OUTPUT);
        if (!BLE.begin()) {
          Serial.println("starting Bluetooth¬Æ Low Energy module failed!");
          while (1);
        }
        BLE.setLocalName("UNO R4 LED");
        BLE.setAdvertisedService(ledService);
        ledService.addCharacteristic(switchCharacteristic);
        BLE.addService(ledService);
        switchCharacteristic.writeValue(0);
        BLE.advertise();
        Serial.println("BLE LED Peripheral");
      }

   - Initialiser la communication s√©rie.
   - Configurer la broche LED en sortie.
   - Initialiser le BLE et ajouter le service et les caract√©ristiques.
   - Commencer la publicit√© BLE.

   .. raw:: html

      <br/>

#. Fonction ``loop()``

   .. code-block:: arduino
   
      void loop() {
        BLEDevice central = BLE.central();
        if (central) {
          Serial.print("Connected to central: ");
          Serial.println(central.address());
          while (central.connected()) {
            if (switchCharacteristic.written()) {
              if (switchCharacteristic.value()) {
                Serial.println("LED on");
                digitalWrite(ledPin, HIGH);
              } else {
                Serial.println("LED off");
                digitalWrite(ledPin, LOW);
              }
            }
          }
          Serial.print("Disconnected from central: ");
          Serial.println(central.address());
        }
      }
   

   - √âcouter les appareils centraux BLE pour se connecter.
   - Si un appareil central est connect√©, lire la valeur de la caract√©ristique pour contr√¥ler la LED. Si une valeur diff√©rente de 0 est re√ßue, allumer la LED. Si 0 est re√ßu, √©teindre la LED.


**R√©f√©rence**

- |link_r4_bluetooth|