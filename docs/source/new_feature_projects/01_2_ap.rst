WiFi制御LED（アクセスポイント）
---------------------------------------------------

このプロジェクトでは、Webインターフェースを通じてLEDライトを制御することができます。ArduinoボードはWiFiアクセスポイントとして機能し、独自のローカルネットワークを作成します。そのネットワークにWebブラウザで接続すると、ボードのピン13に接続されたLEDをオン/オフするオプションが表示されます。プロジェクトは、シリアルモニターを通じてLEDの状態をリアルタイムでフィードバックし、デバッグと操作の流れを容易に理解できるようにします。

1. コードのアップロード
========================

``elite-explorer-kit-main\r4_new_feature\01-wifi_ap`` のパス下にある ``01-wifi_ap.ino`` ファイルを開くか、このコードを **Arduino IDE** にコピーします。

.. note:: 
      Wi-Fi®サポートは、Arduino UNO R4 Coreに付属の内蔵 ``WiFiS3`` ライブラリを通じて有効になります。コアをインストールすると、 ``WiFiS3`` ライブラリも自動的にインストールされます。

``arduino_secrets.h`` を作成または変更し、 ``SECRET_SSID`` と ``SECRET_PASS`` をWi-Fiアクセスポイントの名前とパスワードに置き換えます。ファイルには次のように記載されている必要があります：

.. code:: arduino

    //arduino_secrets.h header file
    #define SECRET_SSID "yournetwork"
    #define SECRET_PASS "yourpassword"

.. raw:: html
    
   <iframe src=https://create.arduino.cc/editor/sunfounder01/8d0d28d2-2394-4eaa-b276-86a4f061badb/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/new_feature_projects/wifi.mp4"  type="video/mp4">
      お使いのブラウザではビデオタグはサポートされていません。
   </video>

2. コードの説明
========================

#. 必要なライブラリのインポート

   Wi-Fi機能のための ``WiFiS3`` ライブラリと、パスワードなどの機密データのための ``arduino_secrets.h`` をインポートします。
  
   .. code-block:: arduino
   
     #include "WiFiS3.h"
     #include "arduino_secrets.h"

#. 設定と変数の初期化

   Wi-Fi SSID、パスワード、キーインデックスを定義すると共に、LEDピンとWi-Fiステータスを初期化します。
  
   .. code-block:: arduino
   
     char ssid[] = SECRET_SSID;        
     char pass[] = SECRET_PASS;        
     int keyIndex = 0;
     int led =  LED_BUILTIN;
     int status = WL_IDLE_STATUS;
     WiFiServer server(80);

#. ``setup()`` 関数

   シリアル通信を初期化し、Wi-Fiモジュールを設定します。
   
   .. code-block:: arduino
   
     void setup() {

       // ... setup code ...
       // Create access point
       status = WiFi.beginAP(ssid, pass);
       // ... error handling ...
       // start the web server on port 80
       server.begin();
     }

   また、uno R4 wifiのファームウェアが最新であるかどうかを確認します。最新版でない場合は、アップグレードの促進が表示されます。ファームウェアのアップグレードについては、 :ref:`update_firmware` を参照してください。

   .. code-block:: arduino

      ...
      String fv = WiFi.firmwareVersion();
      if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
          Serial.println("Please upgrade the firmware");
      }
      ...

   ArduinoのデフォルトIPを変更するために、以下のコードを修正することも検討してください。

   .. code-block:: arduino
      
      WiFi.config(IPAddress(192,48,56,2));
   

#. メイン ``loop()`` 関数

   Arduinoのコードにおける ``loop()`` 関数はいくつかの重要な操作を行います。具体的には以下のような操作です：

   1. アクセスポイントへのデバイスの接続または切断のチェック。
   2. HTTPリクエストを行うクライアントの受信待ち。
   3. クライアントのデータの読み取りと、そのデータに基づいたアクションの実行（例えば、LEDのオン/オフ）。
   
   ここで、これらのステップをより理解しやすくするために、 ``loop()`` 関数を詳しく見ていきましょう。
   
   #. Wi-Fiステータスのチェック

      コードは最初にWi-Fiのステータスが変わったかどうかをチェックします。デバイスが接続または切断された場合、シリアルモニターにそれに応じた情報が表示されます。
   
      .. code-block:: arduino
   
        if (status != WiFi.status()) {
          status = WiFi.status();
          if (status == WL_AP_CONNECTED) {
            Serial.println("Device connected to AP");
          } else {
            Serial.println("Device disconnected from AP");
          }
        }
   
   #. クライアントの受信待ち

      ``WiFiClient client = server.available();`` はクライアントの受信待ちを行います。
     
      .. code-block:: arduino
   
        WiFiClient client = server.available();
   
   #. クライアントリクエストの処理

      クライアントの受信待ちを行い、HTMLウェブページを提供します。ユーザーが提供されたウェブページ上の「Click here to turn the LED on」または「Click here to turn the LED off」というリンクをクリックすると、ArduinoサーバーにHTTP GETリクエストが送信されます。具体的には、LEDを点灯させるためのURL「http://yourAddress/H」と、LEDを消灯させるためのURL「http://yourAddress/L」にアクセスされます。
  
      .. code-block:: arduino

        WiFiClient client = server.available();
        if (client) {
          // ...
          client.println("HTTP/1.1 200 OK");
          client.println("Content-type:text/html");
          client.println();
          client.print("<p style=\"font-size:7vw;\">Click <a href=\"/H\">here</a> turn the LED on<br></p>");
          client.print("<p style=\"font-size:7vw;\">Click <a href=\"/L\">here</a> turn the LED off<br></p>");
          // ...
        }
   
      ArduinoのコードはこれらのGETリクエストを受信します。受信したテキスト行（HTTPヘッダー）の最後に ``GET /H`` と検出した場合、ピン13に接続されたLEDをHIGHに設定し、LEDを点灯させます。同様に、 ``GET /L`` と検出した場合、LEDをLOWに設定し、LEDを消灯させます。
     
      .. code-block:: arduino
   
         while (client.connected()) {            // loop while the client's connected
           delayMicroseconds(10);                // This is required for the Arduino Nano RP2040 Connect - otherwise it will loop so fast that SPI will never be served.
           if (client.available()) {             // if there's bytes to read from the client,
             char c = client.read();             // read a byte, then
             Serial.write(c);                    // print it out to the serial monitor
             if (c == '\n') {                    // if the byte is a newline character
               ...
               }
               else {      // if you got a newline, then clear currentLine:
                 currentLine = "";
               }
             }
             else if (c != '\r') {    // if you got anything else but a carriage return character,
               currentLine += c;      // add it to the end of the currentLine
             }
     
             // Check to see if the client request was "GET /H" or "GET /L":
             if (currentLine.endsWith("GET /H")) {
               digitalWrite(led, HIGH);               // GET /H turns the LED on
             }
             if (currentLine.endsWith("GET /L")) {
               digitalWrite(led, LOW);                // GET /L turns the LED off
             }
           }



**参照**

- |link_r4_wifi|