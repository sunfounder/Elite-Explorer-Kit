 .. note::
   
    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

WiFi-gesteuerte LED (Access Point)
=====================================

Dieses Projekt erm√∂glicht es Ihnen, eine LED √ºber eine Web-Oberfl√§che zu steuern. Das Arduino-Board fungiert als WiFi-Zugangspunkt und erstellt sein eigenes lokales Netzwerk, mit dem Sie sich √ºber einen Webbrowser verbinden k√∂nnen. Einmal verbunden, k√∂nnen Sie im Webbrowser die IP-Adresse des Ger√§ts aufrufen, wo Sie Optionen finden, um eine LED (an Pin 13 des Boards angeschlossen) ein- und auszuschalten. Das Projekt bietet Echtzeit-Feedback √ºber den LED-Status √ºber den seriellen Monitor, was das Debuggen und Verstehen des Ablaufs der Operationen erleichtert.

1. Laden Sie den Code hoch
-------------------------------

√ñffnen Sie die Datei ``01-wifi_ap.ino`` im Pfad ``elite-explorer-kit-main\r4_new_feature\01-wifi_ap`` oder kopieren Sie diesen Code in die **Arduino IDE**.

.. note:: 
      Wi-Fi¬Æ wird √ºber die integrierte ``WiFiS3``-Bibliothek aktiviert, die mit dem Arduino UNO R4 Core geliefert wird. Die Installation des Cores installiert automatisch die ``WiFiS3``-Bibliothek.


Sie m√ºssen auch ``arduino_secrets.h`` erstellen oder bearbeiten, ersetzen Sie ``SECRET_SSID`` und ``SECRET_PASS`` durch den Namen und das Passwort Ihres WiFi-Zugangspunkts. Die Datei sollte enthalten:

.. code:: arduino

    //arduino_secrets.h header file
    #define SECRET_SSID "yournetwork"
    #define SECRET_PASS "yourpassword"

.. raw:: html
    
   <iframe src=https://create.arduino.cc/editor/sunfounder01/8d0d28d2-2394-4eaa-b276-86a4f061badb/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/new_feature_projects/wifi.mp4"  type="video/mp4">
      Ihr Browser unterst√ºtzt das Video-Tag nicht.
   </video>


2. Code-Erkl√§rung
--------------------

#. Importieren erforderlicher Bibliotheken

   Importieren der ``WiFiS3``-Bibliothek f√ºr Wi-Fi-Funktionalit√§ten und ``arduino_secrets.h`` f√ºr sensible Daten wie Passw√∂rter.
  
   .. code-block:: arduino
   
     #include "WiFiS3.h"
     #include "arduino_secrets.h"

#. Konfiguration und Variableninitialisierung

   Definieren Sie WiFi-SSID, Passwort und Schl√ºsselindex sowie den LED-Pin und den WiFi-Status.
  
   .. code-block:: arduino
   
     char ssid[] = SECRET_SSID;        
     char pass[] = SECRET_PASS;        
     int keyIndex = 0;
     int led =  LED_BUILTIN;
     int status = WL_IDLE_STATUS;
     WiFiServer server(80);

#. Funktion ``setup()``

   Initialisieren der seriellen Kommunikation und Konfigurieren des Wi-Fi-Moduls.
   
   .. code-block:: arduino
   
     void setup() {

       // ... setup code ...
       // Create access point
       status = WiFi.beginAP(ssid, pass);
       // ... error handling ...
       // start the web server on port 80
       server.begin();
     }

   Wir √ºberpr√ºfen auch, ob die Firmware-Version von Uno R4 WiFi auf dem neuesten Stand ist. Wenn nicht, wird eine Aufforderung zum Upgrade angezeigt. Sie k√∂nnen :ref:`update_firmware` f√ºr das Firmware-Upgrade konsultieren.

   .. code-block:: arduino

      ...
      String fv = WiFi.firmwareVersion();
      if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
          Serial.println("Please upgrade the firmware");
      }
      ...

   Sie m√∂chten m√∂glicherweise den folgenden Code √§ndern, um die Standard-IP von Arduino √§ndern zu k√∂nnen.

   .. code-block:: arduino
      
      WiFi.config(IPAddress(192,48,56,2));

   

#. Hauptfunktion ``loop()``

   Die Funktion ``loop()`` im Arduino-Code f√ºhrt mehrere Schl√ºsseloperationen aus, insbesondere:
   
   1. √úberpr√ºfen, ob ein Ger√§t sich mit dem Zugangspunkt verbunden oder getrennt hat.
   2. Abh√∂ren von eingehenden Clients, die HTTP-Anfragen stellen.
   3. Lesen der Clientdaten und Ausf√ºhren von Aktionen basierend auf diesen Daten ‚Äì wie das Ein- oder Ausschalten einer LED.
   
   Hier zerlegen wir die Funktion ``loop()``, um diese Schritte verst√§ndlicher zu machen.
   
   #. √úberpr√ºfen des WiFi-Status

      Zuerst √ºberpr√ºft der Code, ob sich der WiFi-Status ge√§ndert hat. Wenn sich ein Ger√§t verbunden oder getrennt hat, wird die Information entsprechend auf dem seriellen Monitor angezeigt.
   
      .. code-block:: arduino
   
        if (status != WiFi.status()) {
          status = WiFi.status();
          if (status == WL_AP_CONNECTED) {
            Serial.println("Device connected to AP");
          } else {
            Serial.println("Device disconnected from AP");
          }
        }
   
   #. Abh√∂ren von eingehenden Clients

      ``WiFiClient client = server.available();`` wartet auf eingehende Clients.
     
      .. code-block:: arduino
   
        WiFiClient client = server.available();
   
   #. Behandlung von Clientanfragen

      Lauscht auf eingehende Clients und liefert ihnen die HTML-Webseite. Wenn ein Benutzer auf den Link ‚ÄûHier klicken, um die LED einzuschalten‚Äú oder ‚ÄûHier klicken, um die LED auszuschalten‚Äú auf der bereitgestellten Webseite klickt, wird eine HTTP-GET-Anfrage an den Arduino-Server gesendet. Speziell werden die URLs ‚Äûhttp://yourAddress/H‚Äú zum Einschalten der LED und ‚Äûhttp://yourAddress/L‚Äú zum Ausschalten aufgerufen.
  
      .. code-block:: arduino

        WiFiClient client = server.available();
        if (client) {
          // ...
          client.println("HTTP/1.1 200 OK");
          client.println("Content-type:text/html");
          client.println();
          client.print("<p style=\"font-size:7vw;\">Click <a href=\"/H\">here</a> turn the LED on<br></p>");
          client.print("<p style=\"font-size:7vw;\">Click <a href=\"/L\">here</a> turn the LED off<br></p>");
          // ...
        }
   
      Der Arduino-Code lauscht auf diese eingehenden GET-Anfragen. Wenn er am Ende einer eingehenden Textzeile (HTTP-Header) ``GET /H`` erkennt, setzt er die mit Pin 13 verbundene LED auf HIGH und schaltet sie somit ein. √Ñhnlich wird die LED auf LOW gesetzt und somit ausgeschaltet, wenn ``GET /L`` erkannt wird.

     
      .. code-block:: arduino
   
         while (client.connected()) {            // loop while the client's connected
           delayMicroseconds(10);                // This is required for the Arduino Nano RP2040 Connect - otherwise it will loop so fast that SPI will never be served.
           if (client.available()) {             // if there's bytes to read from the client,
             char c = client.read();             // read a byte, then
             Serial.write(c);                    // print it out to the serial monitor
             if (c == '\n') {                    // if the byte is a newline character
               ...
               }
               else {      // if you got a newline, then clear currentLine:
                 currentLine = "";
               }
             }
             else if (c != '\r') {    // if you got anything else but a carriage return character,
               currentLine += c;      // add it to the end of the currentLine
             }
     
             // Check to see if the client request was "GET /H" or "GET /L":
             if (currentLine.endsWith("GET /H")) {
               digitalWrite(led, HIGH);               // GET /H turns the LED on
             }
             if (currentLine.endsWith("GET /L")) {
               digitalWrite(led, LOW);                // GET /L turns the LED off
             }
           }



**Referenz**

- |link_r4_wifi|