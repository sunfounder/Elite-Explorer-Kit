.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _new_rtc:

Horloge Temps R√©el
========================================

L'horloge temps r√©el (RTC) est int√©gr√©e dans le microcontr√¥leur de l'UNO R4 WiFi (RA4M1). La RTC est un module d'horloge autonome capable de fonctionner m√™me lorsque l'alimentation principale est d√©connect√©e, gr√¢ce √† une source d'alimentation de secours telle qu'une batterie. Cela rend la RTC incroyablement polyvalente pour diverses applications telles que la planification de t√¢ches temporis√©es dans les syst√®mes domotiques ou l'horodatage des points de donn√©es individuels dans les applications de journalisation des donn√©es.

.. note::
    L'UNO R4 WiFi dispose d'une broche VRTC qui maintient le fonctionnement de la RTC int√©gr√©e m√™me lorsque la carte perd de l'alimentation. Pour utiliser cette fonctionnalit√©, appliquez une tension entre 1,6 et 3,6 V √† la broche VRTC.


T√¢ches R√©p√©titives Planifi√©es
++++++++++++++++++++++++++++++++++++++++++++

Dans certains cas d'utilisation, vous pouvez avoir besoin d'ex√©cuter des t√¢ches sp√©cifiques √† intervalles r√©guliers. Pour √©tablir des interruptions p√©riodiques, vous devrez d'abord initialiser une fonction de rappel p√©riodique. Voici un exemple de code Arduino qui utilise une interruption p√©riodique pour faire clignoter une LED toutes les 2 secondes.


**T√©l√©charger le code**

Ouvrez le fichier ``03-rtc.ino`` situ√© dans ``elite-explorer-kit-main\r4_new_feature\03-rtc``, ou collez le code suivant dans votre IDE Arduino.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/48777cc6-f8a5-4646-b221-36c883ed5a62/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


**Explication du code**

1. Initialisation des composants et biblioth√®ques

   .. code-block:: arduino
   
     #include "RTC.h"
     volatile bool irqFlag = false;
     bool ledState = false;
     const int led = LED_BUILTIN;
   
     void setup() {
       pinMode(led, OUTPUT);
       Serial.begin(9600);
       RTC.begin();
     }
   
   - ``#include "RTC.h"``: Inclut la biblioth√®que RTC.
   - ``volatile bool irqFlag = false;``: D√©clare un drapeau bool√©en volatile. ``volatile`` garantit que la variable peut √™tre correctement acc√©d√©e ou modifi√©e par une interruption. Pour plus de d√©tails sur ``volatile``, consultez la `documentation Arduino sur volatile <https://www.arduino.cc/reference/en/language/variables/variable-scope-qualifiers/volatile/>`_.
   - ``bool ledState = false;``: D√©clare une variable bool√©enne pour suivre l'√©tat de la LED.
   - ``const int led = LED_BUILTIN;``: D√©clare une constante pour la broche de la LED int√©gr√©e.
   - ``pinMode(led, OUTPUT);``: D√©finit la broche de la LED comme sortie.
   - ``Serial.begin(9600);``: Initialise la communication s√©rie √† 9600 bauds.
   - ``RTC.begin();``: Initialise la RTC.

   .. raw:: html
    
        <br/>

2. Configuration de l'horloge temps r√©el

   .. code-block:: arduino
   
     RTCTime mytime(30, Month::JUNE, 2023, 13, 37, 00, DayOfWeek::WEDNESDAY, SaveLight::SAVING_TIME_ACTIVE);
     RTC.setTime(mytime);
   
   - ``RTCTime mytime(...);``: Cr√©e un objet ``RTCTime`` et l'initialise avec une date et une heure sp√©cifiques.
   - ``RTC.setTime(mytime);``: D√©finit la RTC avec l'heure initialis√©e.
   
   Configuration et v√©rification de la fonction de rappel p√©riodique
   
   .. code-block:: arduino
   
     if (!RTC.setPeriodicCallback(periodicCallback, Period::ONCE_EVERY_2_SEC)) {
       Serial.println("ERROR: periodic callback not set");
     }
   
     void loop() {
       if (irqFlag) {
         Serial.println("Timed CallBack");
         ledState = !ledState;
         digitalWrite(led, ledState);
         irqFlag = false;
       }
     }
   
     void periodicCallback() {
       irqFlag = true;
     }
   
   - ``RTC.setPeriodicCallback(...);``: D√©finit un rappel p√©riodique pour se d√©clencher toutes les 2 secondes. La p√©riode peut √™tre sp√©cifi√©e en utilisant les √©num√©rations suivantes :

      - ``ONCE_EVERY_2_SEC``
      - ``ONCE_EVERY_1_SEC``
      - ``N2_TIMES_EVERY_SEC``
      - ``N4_TIMES_EVERY_SEC``
      - ``N8_TIMES_EVERY_SEC``
      - ``N16_TIMES_EVERY_SEC``
      - ``N32_TIMES_EVERY_SEC``
      - ``N64_TIMES_EVERY_SEC``
      - ``N128_TIMES_EVERY_SEC``
      - ``N256_TIMES_EVERY_SEC``

   - ``void loop() {...}``: V√©rifie si le rappel a √©t√© d√©clench√©. Si c'est le cas, bascule l'√©tat de la LED.
   - ``void periodicCallback() {...}``: La fonction de rappel d√©finit ``irqFlag = true`` lorsqu'elle est d√©clench√©e.


**R√©f√©rence**

- |link_r4_rtc|