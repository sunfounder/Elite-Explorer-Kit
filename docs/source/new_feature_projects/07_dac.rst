.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _new_dac:

Convertisseur num√©rique-analogique (DAC)
==============================================

L'Arduino Uno R4 WiFi est dot√© d'un convertisseur num√©rique-analogique (DAC) int√©gr√©. Un DAC est crucial pour convertir des signaux num√©riques en leurs √©quivalents analogiques, une fonctionnalit√© particuli√®rement vitale dans des applications telles que le traitement audio, la g√©n√©ration de signaux analogiques et d'autres sc√©narios n√©cessitant une sortie analogique pr√©cise.

Le DAC de l'Uno R4 WiFi offre une r√©solution allant jusqu'√† 12 bits, fournissant des capacit√©s de sortie analogique v√©ritable qui surpassent celles des broches PWM.

.. image:: img/07_dac.png
  :width: 70%

Jouer de la musique avec le DAC
++++++++++++++++++++++++++++++++++++++

**Sch√©ma de circuit**

.. image:: img/07_dac_bb.png
  :width: 100%
  :align: center

**T√©l√©verser le code**

Ouvrez le fichier ``07-dac.ino`` situ√© dans ``elite-explorer-kit-main\r4_new_feature\07-dac``, ou copiez le code suivant dans votre Arduino IDE.

.. note:: 
    Veuillez placer le fichier ``pitches.h`` dans le m√™me r√©pertoire que le code pour assurer un fonctionnement correct.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/93e0379e-1d2d-4d9c-a603-42b3335e8e05/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Ce projet utilise l'Arduino et le DAC (convertisseur num√©rique-analogique) pour jouer le th√®me embl√©matique de Super Mario Bros. Il utilise une biblioth√®que appel√©e ``analogWave`` pour la g√©n√©ration d'ondes sinuso√Ødales et une autre biblioth√®que, ``pitches.h``, pour d√©finir les fr√©quences des notes.

- ``melody[]`` : Ce tableau contient les notes √† jouer ainsi que leurs dur√©es. Les notes sont repr√©sent√©es par des hauteurs pr√©d√©finies (par exemple, ``NOTE_E5``) et les dur√©es sont repr√©sent√©es en termes de temps (par exemple, 4 signifie une noire). Vous pouvez essayer de composer votre propre m√©lodie en changeant les notes et les dur√©es dans le tableau melody[]. Si vous √™tes int√©ress√©, il existe un r√©f√©rentiel sur GitHub (|link_arduino_songs|) qui fournit du code Arduino pour jouer diff√©rentes chansons. Bien que leur approche puisse √™tre diff√©rente de celle de ce projet, vous pouvez vous r√©f√©rer √† leurs notes et dur√©es. (Il suffit de remplacer le ``melody[]`` dans la piste correspondante par le code de ce projet.)

- ``tempo`` : Le tempo pour ce projet est fix√© √† 200 BPM (battements par minute), qui est utilis√© pour calculer la dur√©e de chaque note. Modifier cette valeur changera la vitesse de l'ex√©cution de la chanson.

- **G√©n√©rateur d'ondes sinuso√Ødales** : La fonction ``sine`` de la biblioth√®que ``analogWave`` initialise un g√©n√©rateur d'ondes sinuso√Ødales √† 10 Hz, qui est utilis√© pour la sortie des notes via le DAC.

- **Dur√©e de la note** : En fonction du tempo d√©fini et du nombre de battements pour chaque note, la dur√©e de chaque note est calcul√©e.

- **Lecture et pause** : Chaque note est jou√©e pendant 85% de sa dur√©e calcul√©e, suivie d'une pause de 15% pour distinguer les notes.

- **Boucle** : Une fois la m√©lodie termin√©e, le code se r√©initialise automatiquement et commence √† rejouer.

Cet exemple montre comment utiliser Arduino et du mat√©riel externe (DAC) pour g√©n√©rer de la musique. Il montre √©galement comment utiliser des tableaux et des boucles pour simplifier la logique de la lecture musicale.


**R√©f√©rence**

- |link_r4_dac|