.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez au c≈ìur de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et tirages au sort** : Participez √† des tirages au sort et des promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _basic_potentiometer:

Potentiom√®tre
==========================

.. https://docs.sunfounder.com/projects/r4-basic-kit/en/latest/projects/controlling_an_led_by_potentiometer_uno.html


Vue d'ensemble
--------------------

Dans cette le√ßon, voyons comment modifier la luminosit√© d'une LED √† l'aide d'un potentiom√®tre et recevoir les donn√©es du potentiom√®tre dans le Moniteur S√©rie pour voir ses valeurs changer.

Composants requis
-------------------------

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`led`
        - |link_led_buy|
    *   - :ref:`cpn_potentiometer`
        - |link_potentiometer_buy|


C√¢blage
----------------------

.. image:: img/19-potentiometer_bb.png
    :align: center
    :width: 70%

Sch√©ma de c√¢blage
---------------------------

Dans cette exp√©rience, le potentiom√®tre est utilis√© comme diviseur de tension, ce qui signifie connecter des dispositifs √† ses trois broches. Connectez la broche centrale du potentiom√®tre √† la broche A0 et les deux autres broches respectivement √† 5V et GND. Par cons√©quent, la tension du potentiom√®tre est de 0-5V. Tournez le bouton du potentiom√®tre et la tension √† la broche A0 changera. Ensuite, convertissez cette tension en une valeur num√©rique (0-1024) avec le convertisseur AD de la carte de contr√¥le. Gr√¢ce √† la programmation, nous pouvons utiliser la valeur num√©rique convertie pour contr√¥ler la luminosit√© de la LED sur la carte de contr√¥le.

.. image:: img/19_potentiometer_schematic.png
   :align: center
   :width: 70%
   
Code
---------------

.. note::

    * Vous pouvez ouvrir le fichier ``19-potentiometer.ino`` sous le chemin ``elite-explorer-kit-main\basic_project\19-potentiometer`` directement.
    * Ou copiez ce code dans Arduino IDE.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/fb09e333-4057-40d8-8485-0de2d88c06c1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s avoir t√©l√©vers√© le code sur la carte Uno, vous pouvez ouvrir le moniteur s√©rie pour observer les valeurs lues du potentiom√®tre. Lorsque vous tournez le bouton du potentiom√®tre, la valeur lue changera en cons√©quence. La lecture analogique brute du potentiom√®tre variera de \(0\) √† \(1023\). Simultan√©ment, le code ajuste cette valeur √† une plage de \(0\) √† \(255\), qui est √©galement affich√©e sur le moniteur s√©rie. Cette valeur ajust√©e est ensuite utilis√©e pour contr√¥ler la luminosit√© de la LED connect√©e. La LED deviendra plus brillante ou plus faible en fonction de la valeur ajust√©e. Il est √† noter que bien que la plage th√©orique du potentiom√®tre soit de \(0\) √† \(1023\), la plage r√©elle peut varier l√©g√®rement en raison des tol√©rances mat√©rielles.

Analyse du code
------------------

#. Initialisation et configuration (d√©finition des modes des broches et initialisation de la communication s√©rie)

   Avant d'entrer dans la boucle, nous d√©finissons les broches que nous utilisons et initialisons la communication s√©rie.

   .. code-block:: arduino

      const int analogPin = 0;  // Broche d'entr√©e analogique connect√©e au potentiom√®tre
      const int ledPin = 9;     // Broche de sortie num√©rique connect√©e √† la LED

      void setup() {
        Serial.begin(9600);  // Initialiser la communication s√©rie avec un d√©bit de 9600 bauds
      }

#. Lecture de l'entr√©e analogique (obtention des donn√©es du potentiom√®tre)

   Dans ce segment, nous lisons les donn√©es analogiques du potentiom√®tre et les imprimons sur le moniteur s√©rie.

   .. code-block:: arduino

        inputValue = analogRead(analogPin);  // Read the analog value from the potentiometer
        Serial.print("Input: ");             // Print "Input: " to the serial monitor
        Serial.println(inputValue);          // Print the raw input value to the serial monitor

#. Cartographie et mise √† l'√©chelle (conversion des donn√©es du potentiom√®tre)

   Nous ajustons les donn√©es brutes du potentiom√®tre, qui se situent dans la plage de 0 √† 1023, √† une nouvelle plage de 0 √† 255.

   ``map(value, fromLow, fromHigh, toLow, toHigh)`` est utilis√© pour convertir un nombre d'une plage √† une autre. Par exemple, si la valeur se situe dans la plage de ``fromLow`` et ``fromHigh``, elle sera convertie en une valeur correspondante dans la plage de ``toLow`` et ``toHigh``, en maintenant la proportionnalit√© entre les deux plages.

   Dans ce cas, comme la broche LED (broche 9) a une plage de 0 √† 255, nous devons mapper les valeurs dans la plage de 0 √† 1023 pour correspondre √† cette m√™me √©chelle de 0 √† 255.

   .. code-block:: arduino

      outputValue = map(inputValue, 0, 1023, 0, 255);  // Mapper la valeur d'entr√©e √† une nouvelle plage

#. Contr√¥le de la LED et sortie s√©rie

   Enfin, nous contr√¥lons la luminosit√© de la LED en fonction de la valeur ajust√©e et imprimons la valeur ajust√©e pour la surveillance.

   .. code-block:: arduino

      Serial.print("Output: ");                        // Imprimer "Output: " sur le moniteur s√©rie
      Serial.println(outputValue);                     // Imprimer la valeur de sortie ajust√©e sur le moniteur s√©rie
      analogWrite(ledPin, outputValue);                // Contr√¥ler la luminosit√© de la LED en fonction de la valeur ajust√©e
      delay(1000);     