.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez-vous dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux avant-go√ªts.
    - **Remises sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _basic_mpr121:

MPR121
==========================

.. https://docs.sunfounder.com/projects/vincent-kit/en/latest/arduino/2.24_mpr121_module.html#ar-mpr121


Aper√ßu
---------------

Dans cette le√ßon, vous apprendrez √† utiliser le MPR121. C'est une bonne option lorsque vous souhaitez ajouter de nombreux interrupteurs tactiles √† votre projet. L'√©lectrode du MPR121 peut √™tre √©tendue avec un conducteur. Si vous connectez un fil √† une banane, vous pouvez transformer la banane en un interrupteur tactile, r√©alisant ainsi des projets comme un piano de fruits.

Composants n√©cessaires
-------------------------

Pour ce projet, nous avons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Elite Explorer
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_mpr121`
        - \-

C√¢blage
----------------------

Dans cet exemple, nous ins√©rons le MPR121 dans la breadboard. Connectez le GND du MPR121 √† GND, 3.3V √† 3V3, IRQ √† la broche num√©rique 2, SCL √† la broche SCL (A5), et SDA √† la broche SDA (A4). Il y a 12 √©lectrodes pour la d√©tection tactile. 

.. note::
    Le MPR121 est aliment√© par 3,3V, pas par 5V.

.. image:: img/23-mpr121_bb.png
    :align: center
    :width: 70%

Sch√©ma de c√¢blage
----------------------

.. image:: img/23_mpr121_schematic.png
   :align: center
   :width: 70%

Code
--------

.. note::

    * Vous pouvez ouvrir le fichier ``23-mpr121.ino`` sous le chemin ``elite-explorer-kit-main\basic_project\23-mpr121`` directement.
    * La biblioth√®que ``Adafruit MPR121`` est utilis√©e ici, vous pouvez l'installer √† partir du **Gestionnaire de biblioth√®ques**.

        .. image:: img/22_mpr121_lib.png
            :align: center

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/de0aa390-de85-43ab-87f7-f380c67c65e8/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s avoir t√©l√©charg√© le code sur la carte UNO, l'√©tat tactile des broches MPR121 "1" et "0" sera enregistr√© dans un tableau bool√©en de 12 bits. Ce tableau sera ensuite imprim√© sur le moniteur s√©rie.

Analyse du code
--------------------
Ce code facilite la communication et l'utilisation du capteur tactile MPR121. Il peut d√©tecter l'√©tat des √©lectrodes tactiles et imprimer des informations sur les √©lectrodes touch√©es ou rel√¢ch√©es sur l'interface s√©rie. Si des donn√©es de capteur d√©taill√©es sont n√©cessaires, le code pertinent peut √™tre d√©comment√©.

Voici une analyse du code :

#. Importation des biblioth√®ques :

   .. code-block:: arduino

       #include <Wire.h>
       #include "Adafruit_MPR121.h"

   * ``Wire.h`` : Utilis√© pour la communication I2C.
   * ``Adafruit_MPR121.h`` : Biblioth√®que Adafruit pour le capteur tactile MPR121.

#. D√©finition de la macro ``_BV`` :

   .. code-block:: arduino

       #ifndef _BV
       #define _BV(bit) (1 << (bit)) 
       #endif
   
   ``_BV(bit)`` d√©finit une macro qui convertit un bit donn√© en valeur binaire correspondante, similaire √† 1 << bit.

#. Initialisation de l'instance de la classe ``Adafruit_MPR121`` :

   .. code-block:: arduino

       Adafruit_MPR121 cap = Adafruit_MPR121();

   Cr√©ation d'une instance de la classe ``Adafruit_MPR121`` nomm√©e ``cap``. L'objet ``cap`` sera utilis√© pour communiquer avec et utiliser le capteur tactile MPR121.

#. Fonction ``setup()`` :

   Initialisation de la communication s√©rie √† un d√©bit de 9600 bauds. Puis, initialisation du capteur tactile MPR121 avec l'adresse I2C par d√©faut de 0x5A. Si l'initialisation √©choue, imprimer un message d'erreur et entrer dans une boucle infinie.

   .. code-block:: arduino

       void setup() {
           Serial.begin(9600);
           
           while (!Serial) { // n√©cessaire pour √©viter que leonardo/micro ne d√©marre trop vite !
               delay(10);
           }
           
           Serial.println("Test du capteur tactile capacitif Adafruit MPR121"); 
           
           // L'adresse par d√©faut est 0x5A, si reli√©e √† 3.3V c'est 0x5B
           // Si reli√©e √† SDA c'est 0x5C et si √† SCL alors 0x5D
           if (!cap.begin(0x5A)) {
               Serial.println("MPR121 non trouv√©, v√©rifier le c√¢blage ?");
               while (1);
           }
           Serial.println("MPR121 trouv√© !");
       }

#. Fonction ``loop()`` :

   * Obtenir l'√©tat actuel du toucher, renvoy√© sous forme d'entier 16 bits.

     .. code-block:: arduino

         currtouched = cap.touched();

   * Parcourir l'√©tat des 12 √©lectrodes (num√©rot√©es de 0 √† 11).

     .. code-block:: arduino

         for (uint8_t i=0; i<12; i++) {
             // si *est* touch√©e et *n'√©tait pas* touch√©e avant, alerte !
             if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
                 Serial.print(i); Serial.println(" touched");
             }
             // si *√©tait* touch√©e et maintenant *ne l'est pas*, alerte !
             if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
                 Serial.print(i); Serial.println(" released");
             }
         }

     * Si une √©lectrode est touch√©e et ne l'√©tait pas avant, imprimer "x touch√©e", o√π x est le num√©ro de l'√©lectrode.
     * Si une √©lectrode √©tait touch√©e avant mais ne l'est plus maintenant, imprimer "x rel√¢ch√©e."

   * Mettre √† jour ``lasttouched`` pour stocker l'√©tat actuel du toucher pour comparaison lors de la prochaine it√©ration.

     .. code-block:: arduino

         lasttouched = currtouched;

   * Informations de d√©bogage (section optionnelle) :

     .. code-block:: arduino

         // informations de d√©bogage, ce qui
         Serial.print("\t\t\t\t\t\t\t\t\t\t\t\t\t 0x"); Serial.println(cap.touched(), HEX);
         Serial.print("Filt: ");
         for (uint8_t i=0; i<12; i++) {
             Serial.print(cap.filteredData(i)); Serial.print("\t");
         }
         Serial.println();
         Serial.print("Base: ");
         for (uint8_t i=0; i<12; i++) {
             Serial.print(cap.baselineData(i)); Serial.print("\t");
         }
         Serial.println();
         
         // ajouter un d√©lai pour ne pas submerger
         delay(100);
