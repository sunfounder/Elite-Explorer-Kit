.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez au c≈ìur de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et tirages au sort** : Participez √† des tirages au sort et des promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _basic_rgb_led:

LED RVB
==========================

Vue d'ensemble
-------------------

Dans cette le√ßon, nous utiliserons le PWM pour contr√¥ler une LED RVB afin qu'elle clignote en diff√©rentes couleurs. Lorsque diff√©rentes valeurs PWM sont d√©finies pour les broches R, G et B de la LED, sa luminosit√© varie. Lorsque les trois couleurs diff√©rentes sont m√©lang√©es, nous pouvons voir que la LED RVB clignote en diff√©rentes couleurs.

Composants requis
-------------------------

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_rgb_led`
        - |link_rgb_led_buy|

PWM
--------

La modulation de largeur d'impulsion, ou PWM, est une technique pour obtenir des r√©sultats analogiques avec des moyens num√©riques. Le contr√¥le num√©rique est utilis√© pour cr√©er une onde carr√©e, un signal basculant entre marche et arr√™t. Ce motif marche-arr√™t peut simuler des tensions entre marche compl√®te (5 Volts) et arr√™t (0 Volts) en changeant la proportion du temps pendant lequel le signal est en marche par rapport au temps pendant lequel le signal est en arr√™t. La dur√©e du "temps de marche" est appel√©e largeur d'impulsion. Pour obtenir des valeurs analogiques variables, vous changez, ou modulez, cette largeur. Si vous r√©p√©tez ce motif marche-arr√™t assez rapidement avec un appareil, une LED par exemple, cela ressemblerait √† ceci : le signal est une tension stable entre 0 et 5V contr√¥lant la luminosit√© de la LED. (Voir la description du PWM sur le site officiel d'Arduino).

Dans le graphique ci-dessous, les lignes vertes repr√©sentent une p√©riode r√©guli√®re. Cette dur√©e ou p√©riode est l'inverse de la fr√©quence PWM. En d'autres termes, avec une fr√©quence PWM d'environ 500Hz sur Arduino, les lignes vertes mesureraient chacune 2 millisecondes.

.. image:: img/11_rgbled_pwm.jpeg
   :align: center
   :width: 60%


Un appel √† analogWrite() se fait sur une √©chelle de 0 √† 255, de sorte que analogWrite(255) demande un cycle de service de 100 % (toujours allum√©), et analogWrite(127) est un cycle de service de 50 % (allum√© la moiti√© du temps), par exemple. 

Vous constaterez que plus la valeur PWM est petite, plus la valeur sera petite apr√®s conversion en tension. Ensuite, la LED devient plus faible en cons√©quence. Par cons√©quent, nous pouvons contr√¥ler la luminosit√© de la LED en contr√¥lant la valeur PWM.


C√¢blage
----------------------

.. image:: img/11-rgb_led_bb.png
    :align: center
    :width: 70%

Sch√©ma de c√¢blage
-----------------------

.. image:: img/11-rgb_led_schematic.png
    :align: center
    :width: 80%

Code
---------------

.. note::

    * Vous pouvez ouvrir le fichier ``11-rgb_led.ino`` sous le chemin ``elite-explorer-kit-main\basic_project\11-rgb_led`` directement.
    * Ou copiez ce code dans Arduino IDE.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/71dc53ac-adc6-4c4d-8d92-1dfffd1d0f7f/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/basic_projects/11_basic_rgb_led.mp4"  type="video/mp4">
      Your browser does not support the video tag.
   </video>

Une fois le code t√©l√©vers√© avec succ√®s, vous observerez la LED RVB clignoter dans un motif circulaire de rouge, vert et bleu au d√©but. Elle continuera ensuite √† clignoter dans l'ordre suivant : rouge, orange, jaune, vert, bleu, indigo et violet.


Analyse du code
--------------------

**D√©finir la couleur**

Ici, nous utilisons la fonction ``color()`` pour d√©finir la couleur de la LED RVB. Dans le code, elle est configur√©e pour clignoter en 7 couleurs diff√©rentes.

Vous pouvez utiliser l'outil de peinture sur votre ordinateur pour obtenir la valeur RVB.

1. Ouvrez l'outil de peinture sur votre ordinateur et cliquez sur Modifier les couleurs.

   .. image:: img/11_rgbled_color1.png
      :align: center


2. S√©lectionnez une couleur, puis vous pourrez voir la valeur RVB de cette couleur. Remplissez-les dans le code.
   
   .. note:: 
      En raison de facteurs mat√©riels et environnementaux, les couleurs affich√©es sur les √©crans d'ordinateur et les LED RVB peuvent varier m√™me en utilisant les m√™mes valeurs RVB.

   .. image:: img/11_rgbled_color2.png
      :align: center

   .. raw:: html

      <br/>
   
   .. code-block:: arduino
   
       void loop() // run over and over again
   
       {
   
         // Couleurs de base:
   
         color(255, 0, 0); // allumer la LED RVB en rouge
   
         delay(1000); // d√©lai de 1 seconde
   
         color(0,255, 0); // allumer la LED RVB en vert
   
         delay(1000); // d√©lai de 1 seconde
   
         color(0, 0, 255); // allumer la LED RVB en bleu
   
         delay(1000); // d√©lai de 1 seconde
   
         // Exemples de couleurs m√©lang√©es:
   
         color(255,0,252); // allumer la LED RVB en rouge
   
         delay(1000); // d√©lai de 1 seconde
   
         color(237,109,0); // allumer la LED RVB en orange
   
         delay(1000); // d√©lai de 1 seconde
   
         color(255,215,0); // allumer la LED RVB en jaune
   
         ......
   
   
**fonction color()**

.. code-block:: arduino

    void color (int red, int green, int blue)
    // la fonction g√©n√©ratrice de couleur

    {

      analogWrite(redPin, red);

      analogWrite(greenPin, green);

      analogWrite(bluePin, blue);

    }

D√©finissez trois variables unsigned char, red, green et blue. √âcrivez leurs valeurs √† ``redPin``, ``greenPin`` et ``bluePin``. Par exemple, color(128,0,128) consiste √† √©crire 128 √† ``redPin``, 0 √† ``greenPin`` et 128 √† ``bluePin``. Le r√©sultat est la LED clignotant en violet.

**analogWrite()**: √âcrit une valeur analogique (onde PWM) sur une broche. Cela n'a rien √† voir avec une broche analogique, mais concerne uniquement les broches PWM. Vous n'avez pas besoin d'appeler ``pinMode()`` pour d√©finir la broche comme sortie avant d'appeler ``analogWrite()``.