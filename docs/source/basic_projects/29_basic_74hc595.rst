.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support expert** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _basic_74hc595:

74HC595
==========================


Vue d'ensemble
----------------------

En g√©n√©ral, il existe deux fa√ßons de piloter un afficheur √† 7 segments. Une m√©thode consiste √† connecter ses 8 broches directement √† huit ports sur la carte Uno, ce que nous avons fait pr√©c√©demment. Ou vous pouvez connecter le 74HC595 √† trois ports de la carte UNO puis l'afficheur √† 7 segments au 74HC595. Dans cette exp√©rience, nous utiliserons la deuxi√®me m√©thode. De cette mani√®re, nous pouvons √©conomiser cinq ports - compte tenu du nombre limit√© de ports de la carte Uno, cela est tr√®s important. Commen√ßons maintenant !

Composants n√©cessaires
------------------------

Dans ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_7segment`
        - |link_7segment_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

C√¢blage
----------------------

.. image:: img/29-74hc595_bb.png
    :align: center
    :width: 95%

Sch√©ma de c√¢blage
--------------------

Dans l'exp√©rience, MR (broche 10) est connect√© √† 5V (niveau HAUT) et OE (broche 1) √† la masse (niveau BAS). Par cons√©quent, les donn√©es sont entr√©es sur le front montant de SHcp et entrent dans le registre de m√©moire par le front montant. Nous utilisons la fonction shiftOut() pour envoyer des donn√©es de 8 bits au registre de d√©calage via DS. Sur le front montant de SHcp, les donn√©es dans le registre de d√©calage se d√©placent successivement d'un bit √† la fois, c'est-√†-dire que les donn√©es de Q1 se d√©placent vers Q2, et ainsi de suite. Sur le front montant de STcp, les donn√©es dans le registre de d√©calage entrent dans le registre de m√©moire. Toutes les donn√©es seront d√©plac√©es vers le registre de m√©moire apr√®s 8 fois. Ensuite, les donn√©es dans le registre de m√©moire sont sorties sur le bus (Q0-Q7). Ainsi, les 16 caract√®res sont affich√©s √† tour de r√¥le dans l'afficheur √† 7 segments.

.. image:: img/29_74hc595_schematic.png
   :align: center


Code
--------

.. note::

    * Vous pouvez ouvrir le fichier ``29-74hc595.ino`` sous le chemin ``elite-explorer-kit-main\basic_project\29-74hc595`` directement.
    * Ou copier ce code dans l'IDE Arduino.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/c7232b3c-61c9-4d7d-849b-55ed406181b1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s avoir t√©l√©vers√© le code sur la carte Uno, vous devriez maintenant voir l'afficheur √† 7 segments afficher de 0 √† 9 et de A √† F.
    

Analyse du code
--------------------

**D√©finir les √©l√©ments du tableau**

.. code-block:: arduino

    int datArray[16] = {252, 96, 218, 242, 102, 182, 190, 224, 254, 246, 238, 62, 156, 122, 158, 142};

Ce tableau stocke les donn√©es des 16 caract√®res de 0 √† F. 252 repr√©sente 0, que vous pouvez calculer vous-m√™me. Pour afficher 0, le segment g (le central) de l'afficheur √† 7 segments doit √™tre √† un niveau bas (√©teint).

Comme le segment g est connect√© √† Q1 du 74HC595, d√©finissez √† la fois Q1 et DP (le point) √† un niveau bas et laissez les autres broches √† un niveau haut. 
Par cons√©quent, les valeurs de Q7 Q6 Q5 Q4 Q3 Q2 Q1 Q0 sont 1 1 1 1 1 1 0 0.

Changez les nombres binaires en nombres d√©cimaux :
1x2\ :sup:`7`\ +1x2\ :sup:`6`\ +1x2\ :sup:`5`\ +1x2\ :sup:`4`\ +1x2\ :sup:`3`\ +1x2\ :sup:`2`\ +0x2\ :sup:`1`\ +1x2\ :sup:`0`\ =252.

Donc, c'est la valeur pour afficher le chiffre **0**. Vous pouvez calculer les autres caract√®res de la m√™me mani√®re.

**Afficher 0-F sur l'afficheur √† 7 segments**

.. code-block:: arduino

    for(int num = 0; num < 16; num++)

    {

      digitalWrite(STcp,LOW); //mettre ST_CP √† la masse et maintenir bas tant que vous transmettez

      shiftOut(DS,SHcp,MSBFIRST,datArray[num]);

      //remettre la broche de verrouillage √† haut pour signaler √† la puce

      //qu'elle n'a plus besoin d'√©couter les informations

      digitalWrite(STcp,HIGH); //mettre ST_CP √† haut pour sauvegarder les donn√©es

      delay(1000); //attendre une seconde

    }

D√©finissez ``STcp`` √† un niveau bas d'abord, puis √† un niveau haut. Cela g√©n√©rera une impulsion de front montant de STcp.

``shiftOut()`` est utilis√© pour d√©caler un octet de donn√©es un bit √† la fois, ce qui signifie d√©caler un octet de donn√©es dans ``dataArray[num]`` vers le registre de d√©calage avec la broche DS. ``MSBFIRST`` signifie d√©placer √† partir des bits de poids fort.

Apr√®s l'ex√©cution de ``digitalWrite(STcp,HIGH)``, le STcp sera √† un front montant. √Ä ce moment-l√†, les donn√©es dans le registre de d√©calage seront transf√©r√©es dans le registre de m√©moire.

Un octet de donn√©es sera transf√©r√© dans le registre de m√©moire apr√®s 8 fois. Ensuite, les donn√©es du registre de m√©moire sont sorties sur le bus (Q0-Q7). Vous verrez un caract√®re s'afficher sur l'afficheur √† 7 segments. Attendez ensuite 1000 ms. Apr√®s cette ligne, revenez √† ``for()``. La boucle se r√©p√®te jusqu'√† ce que tous les caract√®res soient affich√©s sur l'afficheur √† 7 segments un par un apr√®s 16 fois.
