.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Profundiza en el mundo de Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _basic_74hc595:

74HC595
==========================

Descripci√≥n general
---------------------

Generalmente, hay dos formas de controlar una pantalla de 7 segmentos. Una forma es conectar sus 8 pines directamente a ocho puertos en la placa Uno, como hemos hecho anteriormente. O puedes conectar el 74HC595 a tres puertos de la placa UNO y luego la pantalla de 7 segmentos al 74HC595. En este experimento, usaremos esta √∫ltima forma. De esta manera, podemos ahorrar cinco puertos, lo cual es muy importante considerando los puertos limitados de la placa Uno. ¬°Vamos a empezar!

Componentes necesarios
-------------------------

En este proyecto, necesitamos los siguientes componentes. 

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN A LOS COMPONENTES
        - ENLACE DE COMPRA

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_7segment`
        - |link_7segment_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

Conexi√≥n
----------

.. image:: img/29-74hc595_bb.png
    :align: center
    :width: 95%

Diagrama esquem√°tico
-----------------------

En el experimento, MR (pin 10) est√° conectado a 5V (Nivel ALTO) y OE (pin 1) a GND (Nivel BAJO). Por lo tanto, los datos se ingresan en el borde ascendente de SHcp y entran en el registro de memoria a trav√©s del borde ascendente. Usamos la funci√≥n shiftout() para enviar un dato de 8 bits al registro de desplazamiento a trav√©s de DS. En el borde ascendente del SHcp, los datos en el registro de desplazamiento se mueven sucesivamente un bit a la vez, es decir, los datos en Q1 se mueven a Q2, y as√≠ sucesivamente. En el borde ascendente de STcp, los datos en el registro de desplazamiento se mueven al registro de memoria. Todos los datos se mover√°n al registro de memoria despu√©s de 8 veces. Luego, los datos en el registro de memoria se env√≠an al bus (Q0-Q7). As√≠, los 16 caracteres se muestran en la pantalla de 7 segmentos en turno.

.. image:: img/29_74hc595_schematic.png
   :align: center

C√≥digo
------

.. note::

    * Puedes abrir el archivo ``29-74hc595.ino`` en la ruta ``elite-explorer-kit-main\basic_project\29-74hc595`` directamente.
    * O copiar este c√≥digo en Arduino IDE.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/c7232b3c-61c9-4d7d-849b-55ed406181b1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Despu√©s de cargar el c√≥digo en la placa uno, deber√≠as ver la pantalla de 7 segmentos mostrar de 0 a 9 y de A a F.
    
An√°lisis del c√≥digo
--------------------

**Establecer los elementos del array**

.. code-block:: arduino

    int datArray[16] = {252, 96, 218, 242, 102, 182, 190, 224, 254, 246, 238, 62, 156, 122, 158, 142};

Este array almacena los datos de los 16 caracteres de 0 a F. 252 representa 0, que puedes calcular por ti mismo. Para mostrar 0, el segmento g (el del medio) de la pantalla de 7 segmentos debe estar en nivel bajo (apagado).

Dado que el segmento g est√° conectado a Q1 del 74HC595, configura tanto Q1 como DP (el punto) en nivel bajo y deja los dem√°s pines en nivel alto.
Por lo tanto, los valores de Q7 Q6 Q5 Q4 Q3 Q2 Q1 Q0 son 1 1 1 1 1 1 0 0.

Cambia los n√∫meros binarios a decimales:
1x2\ :sup:`7`\ +1x2\ :sup:`6`\ +1x2\ :sup:`5`\ +1x2\ :sup:`4`\ +1x2\ :sup:`3`\ +1x2\ :sup:`2`\ +0x2\ :sup:`1`\ +1x2\ :sup:`0`\ =252.

As√≠ que ese es el valor para que se muestre el n√∫mero **0**. Puedes calcular otros caracteres de manera similar.

**Mostrar 0-F en la pantalla de 7 segmentos**

.. code-block:: arduino

    for(int num = 0; num < 16; num++)

    {

      digitalWrite(STcp,LOW); //poner a tierra ST_CP y mantenerlo bajo mientras se transmite

      shiftOut(DS,SHcp,MSBFIRST,datArray[num]);

      //retorna el pin de cierre alto para se√±alar al chip que ya no necesita escuchar informaci√≥n

      digitalWrite(STcp,HIGH); //activar el ST_CP para guardar los datos

      delay(1000); //esperar un segundo

    }

Establece ``STcp`` en nivel bajo primero y luego en nivel alto. Generar√° un pulso ascendente de STcp.

``shiftOut()`` se usa para desplazar un byte de datos un bit a la vez, lo que significa desplazar un byte de datos en ``dataArray[num]`` al registro de desplazamiento con el pin DS. ``MSBFIRST`` significa mover desde los bits altos.

Despu√©s de ejecutar ``digitalWrite(STcp,HIGH)``, STcp estar√° en el borde ascendente. En este momento, los datos en el registro de desplazamiento se mover√°n al registro de memoria.

Un byte de datos se transferir√° al registro de memoria despu√©s de 8 veces. Luego, los datos del registro de memoria se env√≠an al bus (Q0-Q7). Ver√°s que un car√°cter se muestra en la pantalla de 7 segmentos. Luego espera 1000 ms. Despu√©s de esa l√≠nea, vuelve a ``for()``. El bucle se repite hasta que todos los caracteres se muestren en la pantalla de 7 segmentos uno por uno despu√©s de 16 veces.
