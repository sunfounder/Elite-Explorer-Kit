.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _basic_74hc595:

74HC595
==========================

√úberblick
----------------------

Im Allgemeinen gibt es zwei M√∂glichkeiten, eine einzelne 7-Segment-Anzeige anzusteuern. Eine M√∂glichkeit besteht darin, ihre 8 Pins direkt an acht Ports des Uno-Boards anzuschlie√üen, was wir bereits getan haben. Oder Sie k√∂nnen den 74HC595 an drei Ports des UNO-Boards anschlie√üen und dann die 7-Segment-Anzeige an den 74HC595. In diesem Experiment werden wir Letzteres verwenden. Auf diese Weise k√∂nnen wir f√ºnf Ports sparen ‚Äì in Anbetracht der begrenzten Ports des Uno-Boards ist das sehr wichtig. Lassen Sie uns jetzt beginnen!

Ben√∂tigte Komponenten
------------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_7segment`
        - |link_7segment_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

Verdrahtung
----------------------

.. image:: img/29-74hc595_bb.png
    :align: center
    :width: 95%

Schaltplan
--------------------

Im Experiment ist MR (Pin 10) mit 5V (HIGH Level) verbunden und OE (Pin 1) mit GND (LOW Level). Daher werden die Daten in die steigende Flanke von SHcp eingegeben und durch die steigende Flanke in das Speicherregister √ºbertragen. Wir verwenden die Funktion shiftout(), um ein 8-Bit-Datum an das Schieberegister √ºber DS auszugeben. In der steigenden Flanke des SHcp bewegen sich die Daten im Schieberegister sukzessive um ein Bit, d.h. die Daten in Q1 bewegen sich nach Q2 und so weiter. In der steigenden Flanke von STcp bewegen sich die Daten im Schieberegister in das Speicherregister. Alle Daten werden nach 8 Durchg√§ngen in das Speicherregister verschoben. Dann werden die Daten im Speicherregister auf den Bus (Q0-Q7) ausgegeben. So werden die 16 Zeichen nacheinander in der 7-Segment-Anzeige angezeigt.

.. image:: img/29_74hc595_schematic.png
   :align: center


Code
--------

.. note::

    * Sie k√∂nnen die Datei ``29-74hc595.ino`` direkt im Pfad ``elite-explorer-kit-main\basic_project\29-74hc595`` √∂ffnen.
    * Oder kopieren Sie diesen Code in die Arduino IDE.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/c7232b3c-61c9-4d7d-849b-55ed406181b1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Nachdem die Codes auf das Uno-Board hochgeladen wurden, sollten Sie jetzt die 7-Segment-Anzeige von 0 bis 9 und A bis F sehen.
    

Code-Analyse
-----------------

**Setzen der Array-Elemente**

.. code-block:: arduino

    int datArray[16] = {252, 96, 218, 242, 102, 182, 190, 224, 254, 246, 238, 62, 156, 122, 158, 142};

Dieses Array speichert die Daten der 16 Zeichen von 0 bis F. 252 steht f√ºr 0, was Sie selbst berechnen k√∂nnen. Um 0 anzuzeigen, muss das Segment g (das mittlere) der 7-Segment-Anzeige auf niedrigem Niveau (dunkel) sein.

Da das Segment g mit Q1 des 74HC595 verbunden ist, setzen Sie sowohl Q1 als auch DP (den Punkt) auf niedriges Niveau und lassen Sie die restlichen Pins auf hohem Niveau.
Daher sind die Werte von Q7 Q6 Q5 Q4 Q3 Q2 Q1 Q0 1 1 1 1 1 1 0 0.

√Ñndern Sie die Bin√§rzahlen in Dezimalzahlen:
1x2\ :sup:`7`\ +1x2\ :sup:`6`\ +1x2\ :sup:`5`\ +1x2\ :sup:`4`\ +1x2\ :sup:`3`\ +1x2\ :sup:`2`\ +0x2\ :sup:`1`\ +1x2\ :sup:`0`\ =252.

So ist das der Wert f√ºr die Anzeige der Zahl **0**. Sie k√∂nnen andere Zeichen √§hnlich berechnen.

**Anzeigen von 0-F in der 7-Segment-Anzeige**

.. code-block:: arduino

    for(int num = 0; num < 16; num++)

    {

      digitalWrite(STcp,LOW); //ground ST_CP and hold low for as long as you are transmitting

      shiftOut(DS,SHcp,MSBFIRST,datArray[num]);

      //return the latch pin high to signal chip that it

      //no longer needs to listen for information

      digitalWrite(STcp,HIGH); //pull the ST_CPST_CP to save the data

      delay(1000); //wait for a second

    }

Setzen Sie zuerst ``STcp`` auf niedriges und dann auf hohes Niveau. Es erzeugt einen steigenden Flankenimpuls von STcp.

``shiftOut()`` wird verwendet, um ein Byte Daten bitweise auszugeben, was bedeutet, ein Byte Daten in ``dataArray[num]`` mit dem DS-Pin in das Schieberegister zu verschieben. ``MSBFIRST`` bedeutet, von hohen Bits zu verschieben.

Nachdem ``digitalWrite(STcp,HIGH)`` ausgef√ºhrt wurde, wird STcp an der steigenden Flanke sein. Zu diesem Zeitpunkt werden die Daten im Schieberegister in das Speicherregister verschoben.

Ein Byte Daten wird nach 8 Mal in das Speicherregister √ºbertragen. Dann werden die Daten des Speicherregisters auf den Bus (Q0-Q7) ausgegeben. Sie sehen ein Zeichen auf der 7-Segment-Anzeige. Dann warten Sie 1000 ms. Danach geht es zur√ºck zur ``for()``-Schleife. Die Schleife wiederholt sich, bis alle Zeichen nacheinander in der 7-Segment-Anzeige nach
16 Mal angezeigt werden.
