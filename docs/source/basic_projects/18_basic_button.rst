.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez au c≈ìur de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et tirages au sort** : Participez √† des tirages au sort et des promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _basic_button:

Bouton
==========================

.. https://docs.sunfounder.com/projects/r4-basic-kit/en/latest/projects/controlling_led_by_button_uno.html#button-uno


Vue d'ensemble
--------------------

Dans cette le√ßon, vous allez apprendre √† contr√¥ler une LED √† l'aide d'un bouton avec Arduino. Les boutons et les LED sont des composants fondamentaux dans une large gamme d'appareils √©lectroniques, tels que les t√©l√©commandes, les lampes de poche et les installations interactives. Dans cette configuration, un bouton est utilis√© comme dispositif d'entr√©e pour contr√¥ler l'√©tat d'une LED, qui sert de dispositif de sortie.

Le bouton est connect√© √† la broche 12 de la carte Arduino Uno R4, et la LED est connect√©e √† la broche 13. Lorsque le bouton est enfonc√©, un signal est envoy√© √† l'Arduino, d√©clenchant l'allumage de la LED. Inversement, lorsque le bouton est rel√¢ch√©, la LED s'√©teint. Ce m√©canisme simple mais efficace peut √™tre la base de projets plus complexes, tels que des syst√®mes domotiques, des affichages interactifs, et bien plus encore.

√Ä la fin de cette le√ßon, vous comprendrez comment lire l'entr√©e d'un bouton et l'utiliser pour contr√¥ler une LED, acqu√©rant ainsi une compr√©hension fondamentale des op√©rations d'entr√©e/sortie avec Arduino.

Composants requis
-------------------------

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_capacitor`
        - |link_capacitor_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|


C√¢blage
----------------------

.. image:: img/18-button_bb.png
    :align: center
    :width: 70%


Sch√©ma de c√¢blage
------------------------

Connectez une extr√©mit√© du bouton √† la broche 12, qui est reli√©e √† une r√©sistance pull-down et √† un condensateur de 0.1uF (104) (pour √©liminer les parasites et obtenir un niveau stable lorsque le bouton fonctionne). Connectez l'autre extr√©mit√© de la r√©sistance √† la masse (GND) et l'une des broches √† l'autre extr√©mit√© du bouton au 5V. Lorsque le bouton est enfonc√©, la broche 12 est √† 5V (HIGH) et la broche 13 (int√©gr√©e √† une LED) est √©galement d√©finie sur HIGH. Ensuite, rel√¢chez le bouton (la broche 12 passe √† LOW) et la broche 13 est √† LOW. Vous verrez ainsi la LED s'allumer et s'√©teindre alternativement lorsque le bouton est enfonc√© et rel√¢ch√©.

.. image:: img/18_button_schematic.png
    :align: center
    :width: 70%


Code
---------------

.. note::

    * Vous pouvez ouvrir le fichier ``18-button.ino`` sous le chemin ``elite-explorer-kit-main\basic_project\18-button`` directement.
    * Ou copiez ce code dans Arduino IDE.




.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/a710eb54-9447-4542-ac98-c9a7e1ec4256/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    


Analyse du code
-------------------

#. D√©finir les constantes et les variables

   Dans ce segment, les num√©ros de broche pour le bouton et la LED sont d√©finis. De plus, une variable ``buttonState`` est d√©clar√©e pour contenir l'√©tat actuel du bouton.
 
   .. code-block:: arduino
 
     const int buttonPin = 12;
     const int ledPin = 13;
     int buttonState = 0;

#. Fonction Setup

   La fonction ``setup()`` s'ex√©cute une fois lorsque la carte Arduino d√©marre. Les modes des broches pour le bouton et la LED sont d√©finis √† l'aide de la fonction ``pinMode``.
 
   .. code-block:: arduino
 
     void setup() {
       pinMode(buttonPin, INPUT);
       pinMode(ledPin, OUTPUT);
     }

#. Boucle principale

   La fonction ``loop()`` s'ex√©cute en continu. √Ä l'int√©rieur de cette boucle, la fonction ``digitalRead()`` est utilis√©e pour lire l'√©tat du bouton. En fonction de l'√©tat du bouton, la LED est allum√©e ou √©teinte.
 
   .. code-block:: arduino
 
     void loop() {
       buttonState = digitalRead(buttonPin);
       if (buttonState == HIGH) {
         digitalWrite(ledPin, HIGH);
       } else {
         digitalWrite(ledPin, LOW);
       }
     }
