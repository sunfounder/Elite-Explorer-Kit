.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et √† des promotions de f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _basic_irrecv:

R√©cepteur Infrarouge
==========================

.. https://docs.sunfounder.com/projects/uno-mega-kit/en/latest/uno/infrared_Receiver_uno.html#receive-uno

.. https://docs.sunfounder.com/projects/r4-basic-kit/en/latest/projects/infrared_Receiver_uno.html#receive-uno


Aper√ßu
------------------

Un r√©cepteur infrarouge est un composant qui re√ßoit des signaux infrarouges et peut ind√©pendamment recevoir des rayons infrarouges et produire des signaux compatibles avec le niveau TTL. Il est de taille similaire √† un transistor encapsul√© dans du plastique et convient √† tous les types de t√©l√©commandes infrarouges et de transmissions infrarouges.

Composants n√©cessaires
-------------------------

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_ir_receiver`
        - |link_receiver_buy|


C√¢blage
----------------------

.. image:: img/22-ir_receiver_bb.png
    :align: center
    :width: 80%


Sch√©ma de c√¢blage
---------------------

.. image:: img/22_irrecv_schematic.png
    :align: center
    :width: 50%

Code
---------------

.. note::

    * Vous pouvez ouvrir le fichier ``22-ir_receiver.ino`` sous le chemin ``elite-explorer-kit-main\basic_project\22-ir_receiver`` directement.
    * Ou copiez ce code dans l'IDE Arduino.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/92e1cb75-cda1-4fc7-9680-28e28df8dccc/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

* La biblioth√®que ``IRremote`` est utilis√©e ici, vous pouvez l'installer depuis le **Gestionnaire de Biblioth√®ques**.

    .. image:: img/22_irrecv_lib.png
        :align: center

.. note::

    * Il y a une pi√®ce en plastique transparent √† l'arri√®re de la t√©l√©commande pour couper l'alimentation, retirez-la avant d'utiliser la t√©l√©commande.

Analyse du code
---------------------

Ce code est con√ßu pour fonctionner avec une t√©l√©commande infrarouge (IR) en utilisant la biblioth√®que ``IRremote``. Voici le d√©tail :

#. Inclusion de la biblioth√®que et d√©finition des constantes. Tout d'abord, la biblioth√®que IRremote est incluse et le num√©ro de broche pour le r√©cepteur IR est d√©fini comme √©tant 2.

   .. code-block:: cpp
 
     #include <IRremote.h>
     const int IR_RECEIVE_PIN = 2;

#. Initialisation de la communication s√©rie √† un d√©bit de 9600 bauds. Initialisation du r√©cepteur IR sur la broche sp√©cifi√©e (``IR_RECEIVE_PIN``) et activation du retour d'information LED (si applicable).

   .. code-block:: arduino

       void setup() {
           Serial.begin(9600);                                     // D√©marrer la communication s√©rie √† 9600 bauds
           IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK);  // D√©marrer le r√©cepteur IR
       }

#. La boucle s'ex√©cute en continu pour traiter les signaux entrants de la t√©l√©commande IR.

   .. code-block:: arduino

      void loop() {
        // V√©rifie s'il y a un signal IR entrant
        if (IrReceiver.decode()) {
          // IrReceiver.printIRResultShort(&Serial);                 // Imprimer les donn√©es re√ßues en une ligne
          // Serial.println(IrReceiver.decodedIRData.command, HEX);  // Imprimer la commande en format hexad√©cimal
          Serial.println(decodeKeyValue(IrReceiver.decodedIRData.command));  // Mapper et imprimer le signal IR d√©cod√© √† la valeur de la touche correspondante
      
          IrReceiver.resume();  // Activer la r√©ception de la prochaine valeur
        }
      }

   * V√©rifie si un signal IR est re√ßu et d√©cod√© avec succ√®s.
   * D√©code la commande IR et la stocke dans ``decodedValue`` en utilisant une fonction personnalis√©e ``decodeKeyValue()``.
   * Imprime la valeur IR d√©cod√©e sur le moniteur s√©rie.
   * Reprend la r√©ception des signaux IR pour le signal suivant.

   .. raw:: html

        <br/>

#. Fonction auxiliaire pour mapper les signaux IR re√ßus aux touches correspondantes

   .. image:: img/22_irrecv_key.png
      :align: center
      :width: 80%

   .. code-block:: arduino

      // Fonction pour mapper les signaux IR re√ßus aux touches correspondantes
      String decodeKeyValue(long result) {
        // Chaque case correspond √† une commande IR sp√©cifique
        switch (result) {
          case 0x16:
            return "0";
          case 0xC:
            return "1";
          case 0x18:
            return "2";
          case 0x5E:
            return "3";
          case 0x8:
            return "4";
          case 0x1C:
            return "5";
          case 0x5A:
            return "6";
          case 0x42:
            return "7";
          case 0x52:
            return "8";
          case 0x4A:
            return "9";
          case 0x9:
            return "+";
          case 0x15:
            return "-";
          case 0x7:
            return "EQ";
          case 0xD:
            return "U/SD";
          case 0x19:
            return "CYCLE";
          case 0x44:
            return "PLAY/PAUSE";
          case 0x43:
            return "FORWARD";
          case 0x40:
            return "BACKWARD";
          case 0x45:
            return "POWER";
          case 0x47:
            return "MUTE";
          case 0x46:
            return "MODE";
          case 0x0:
            return "ERROR";
          default:
            return "ERROR";
        }
      }