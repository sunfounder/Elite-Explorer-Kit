.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _basic_stepper_motor:

Moteur Pas √† Pas
==========================

.. https://docs.sunfounder.com/projects/r4-basic-kit/en/latest/projects/stepper_motor_uno.html#stepper-uno

Aper√ßu
---------------

Dans cette le√ßon, vous apprendrez √† contr√¥ler les moteurs pas √† pas, en particulier le mod√®le 28BYJ-48, en utilisant un pilote ULN2003 et un Arduino Uno R4. Les moteurs pas √† pas sont utilis√©s dans une vari√©t√© d'applications telles que les imprimantes 3D, les machines CNC, la robotique et m√™me dans les appareils √©lectrom√©nagers courants. Leur contr√¥le pr√©cis permet des mouvements complexes, ce qui les rend id√©aux pour des projets n√©cessitant une haute pr√©cision de positionnement.

Dans ce projet, nous allons configurer le moteur pas √† pas 28BYJ-48 pour tourner dans les directions horaire et antihoraire √† diff√©rentes vitesses. Les moteurs pas √† pas comme celui-ci sont souvent utilis√©s dans les syst√®mes automatis√©s pour faire tourner des objets ou entra√Æner des m√©canismes n√©cessitant un contr√¥le pr√©cis. Par exemple, ils peuvent √™tre utilis√©s dans des rideaux automatiques, o√π les rideaux s'ouvrent ou se ferment √† des moments sp√©cifiques ou sous des conditions sp√©cifiques. En comprenant comment contr√¥ler la rotation et la vitesse d'un moteur pas √† pas, vous serez bien pr√©par√© √† les int√©grer dans vos propres projets √©lectroniques.

Composants n√©cessaires
-------------------------

Pour ce projet, nous avons besoin des composants suivants. 

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_stepper_motor`
        - |link_stepper_motor_buy|
    *   - :ref:`cpn_power`
        - \-


C√¢blage
----------------------

.. warning::
    En raison de la haute consommation d'√©nergie du moteur pas √† pas, il est conseill√© d'utiliser une alimentation externe de 5V au lieu de se fier √† l'Arduino.

    Bien qu'il soit possible d'alimenter le moteur pas √† pas directement √† partir de l'Arduino, cela n'est pas recommand√© car cela peut provoquer des interf√©rences √©lectriques sur ses lignes d'alimentation, pouvant potentiellement endommager l'Arduino.

.. note::
    Pour prot√©ger la batterie du :ref:`cpn_power`, veuillez la charger compl√®tement avant de l'utiliser pour la premi√®re fois.

.. image:: img/26-stepper_motor_bb.png
    :align: center


Sch√©ma de c√¢blage
-----------------------

.. image:: img/26_stepper_motor_schematic.png
   :align: center
   :width: 80%


Code
---------------

.. note::

    * Vous pouvez ouvrir le fichier ``26-stepper_motor.ino`` sous le chemin ``elite-explorer-kit-main\basic_project\26-stepper_motor.rst`` directement.
    * Ou copier ce code dans l'IDE Arduino.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/ce640f07-39a0-418a-9114-901df676ff32/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s avoir t√©l√©vers√© le code sur la carte Arduino Uno, le moteur pas √† pas 28BYJ-48 commencera √† tourner, entra√Æn√© par le pilote ULN2003. Initialement, le moteur tournera dans le sens horaire √† une vitesse de 5 RPM (tours par minute) pour une r√©volution compl√®te. Apr√®s avoir termin√© la rotation horaire, le moteur s'arr√™tera pendant 1 seconde.

Ensuite, le moteur tournera dans le sens antihoraire √† une vitesse augment√©e de 15 RPM pour une autre r√©volution compl√®te. Encore une fois, le moteur s'arr√™tera pendant 1 seconde apr√®s la rotation antihoraire. Le cycle de rotation et de pause continuera ind√©finiment tant que l'Arduino restera aliment√©.


Analyse du code
-----------------

1. **Initialisation du moteur pas √† pas**

   .. code-block:: arduino
   
       #include <Stepper.h>  // Inclure la biblioth√®que Stepper

       #define STEPS 2038                   // D√©finir le nombre de pas par r√©volution pour le moteur
       Stepper stepper(STEPS, 2, 3, 4, 5);  // Initialiser l'objet stepper et d√©finir les connexions de broches (IN1, IN3, IN2, IN4)

   Inclure un fichier d'en-t√™te ``Stepper.h``, d√©finir les pas √† 2038 et initialiser ensuite le stepper avec une fonction stepper().

   ``STEPS``: Le nombre de pas dans une r√©volution de votre moteur. Pour ce moteur pas √† pas, cette valeur est de 2038.

   ``Stepper(steps, pin1, pin2, pin3, pin4)``: Cette fonction cr√©e une nouvelle instance de la classe Stepper qui repr√©sente un moteur pas √† pas particulier connect√© √† votre carte Arduino. Les broches pin1, pin2, pin3 et pin4 correspondent aux broches IN1, IN3, IN2 et IN4 sur le pilote ULN2003.
   

2. **Fonction loop()**

   .. code-block:: arduino
   
      void loop() {
        // Tourner dans le sens horaire √† 5 RPM
        stepper.setSpeed(5);
        stepper.step(STEPS);  // Tourner d'une r√©volution compl√®te dans le sens horaire
        delay(1000);          // Attendre 1 seconde
      
        // Tourner dans le sens antihoraire √† 15 RPM
        stepper.setSpeed(15);
        stepper.step(-STEPS);  // Tourner d'une r√©volution compl√®te dans le sens antihoraire
        delay(1000);           // Attendre 1 seconde
      }
   
   Le programme principal fait tourner le moteur pas √† pas continuellement, compl√©tant un cercle complet dans le sens horaire √† 5 RPM puis un cercle complet dans le sens antihoraire √† 15 RPM.


   - ``setSpeed(rpms)``: D√©finit la vitesse du moteur en rotations par minute (RPM). Cette fonction ne fait pas tourner le moteur, elle d√©finit simplement la vitesse √† laquelle il tournera lorsque vous appellerez step().

     - ``rpms``: la vitesse √† laquelle le moteur doit tourner en rotations par minute - un nombre positif (long)
   
   .. raw::html

        <br/>

   
   - ``step(steps)``: Cette fonction fait tourner le moteur d'un nombre de pas sp√©cifi√©, en utilisant la vitesse d√©finie dans le dernier appel √† setSpeed(). Il est important de noter que cette fonction fonctionne de mani√®re bloquante, ce qui signifie qu'elle attendra que le moteur ait termin√© son mouvement avant de permettre au contr√¥le de passer √† la ligne suivante de votre croquis. 
   
     Par exemple, si vous d√©finissez la vitesse √† 1 RPM et appelez step(2038) sur un moteur avec 2038 pas, il faudra une minute enti√®re pour que cette fonction s'ex√©cute. Pour obtenir un contr√¥le plus pr√©cis, il est recommand√© de maintenir une vitesse plus √©lev√©e et de ne d√©placer que quelques pas √† chaque appel √† step().
   
     - ``steps``: le nombre de pas pour faire tourner le moteur - positif pour tourner dans un sens, n√©gatif pour tourner dans l'autre (int).
