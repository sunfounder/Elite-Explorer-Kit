.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez au c≈ìur de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et tirages au sort** : Participez √† des tirages au sort et des promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _basic_audio_speaker:

Module Audio et Haut-parleur
===================================

Vue d'ensemble
----------------------
Dans cette le√ßon, vous allez d√©couvrir le module audio et le haut-parleur utilis√©s avec une carte Arduino Uno. Ces composants sont largement utilis√©s dans diverses applications √©lectroniques, y compris les jouets musicaux, les syst√®mes audio DIY, les alarmes et m√™me les instruments de musique sophistiqu√©s. En combinant un Arduino avec un module audio et un haut-parleur, vous pouvez cr√©er un lecteur de m√©lodies simple mais efficace.


Composants requis
-----------------------------

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_audio_speaker`
        - \-


C√¢blage
----------------------

√âtant donn√© qu'il s'agit d'un amplificateur mono, vous pouvez connecter la broche 8 √† la broche L ou R du module amplificateur audio.

La r√©sistance de 10K est utilis√©e pour r√©duire le bruit haute fr√©quence et diminuer le volume audio. Elle forme un filtre passe-bas RC avec la capacit√© parasite du DAC et de l'amplificateur audio. Ce filtre diminue l'amplitude des signaux haute fr√©quence, r√©duisant efficacement le bruit haute fr√©quence. Ainsi, l'ajout de la r√©sistance de 10K adoucit la musique et √©limine les bruits haute fr√©quence ind√©sirables.

.. image:: img/17-audio_bb.png
    :align: center
    :width: 100%

Sch√©ma de c√¢blage
-----------------------

.. image:: img/17-audio_schematic.png
    :align: center
    :width: 80%


Code
---------------

.. note::

    * Vous pouvez ouvrir le fichier ``17-speaker.ino`` sous le chemin ``elite-explorer-kit-main\basic_project\17-speaker`` directement.
    * Ou copiez ce code dans Arduino IDE.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/33b690b5-0be6-434d-83d7-5bfcfce3775e/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Lorsque vous avez termin√© de t√©l√©verser le code sur la carte R4, vous pouvez entendre une m√©lodie contenant sept notes.

Analyse du code
------------------------

1. Inclusion de la biblioth√®que pitches:
   Cette biblioth√®que fournit les valeurs de fr√©quence pour diverses notes de musique, vous permettant d'utiliser la notation musicale dans votre code.

   .. note::
      Veuillez placer le fichier ``pitches.h`` dans le m√™me r√©pertoire que le code pour assurer son bon fonctionnement. |link_pitches|

      .. image:: img/16_passive_buzzer_piches.png

   .. code-block:: arduino
       
      #include "pitches.h"

2. D√©finition des constantes et des tableaux :

   * ``speakerPin`` est la broche num√©rique sur l'Arduino o√π le haut-parleur est connect√©.

   * ``melody[]`` est un tableau qui stocke la s√©quence des notes √† jouer.

   * ``noteDurations[]`` est un tableau qui stocke la dur√©e de chaque note de la m√©lodie.

   .. code-block:: arduino
   
      const int speakerPin = 8;
      int melody[] = {
        NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, 0, NOTE_B3, NOTE_C4
      };
      int noteDurations[] = {
        4, 8, 8, 4, 4, 4, 4, 4
      };

3. Jouer la m√©lodie :

   * La boucle ``for`` it√®re sur chaque note de la m√©lodie.

   * La fonction ``tone()`` joue une note sur le haut-parleur pour une dur√©e sp√©cifique.

   * Un d√©lai est ajout√© entre les notes pour les distinguer.

   * La fonction ``noTone()`` arr√™te le son.

   .. code-block:: arduino
   
      void setup() {
        for (int thisNote = 0; thisNote < 8; thisNote++) {
          int noteDuration = 1000 / noteDurations[thisNote];
          tone(speakerPin, melody[thisNote], noteDuration);
          int pauseBetweenNotes = noteDuration * 1.30;
          delay(pauseBetweenNotes);
          noTone(speakerPin);
        }
      }

4. Fonction loop vide :
   Comme la m√©lodie est jou√©e une seule fois dans le setup, il n'y a pas de code dans la fonction loop.

5. N'h√©sitez pas √† exp√©rimenter en modifiant les notes et les dur√©es dans les tableaux ``melody[]`` et ``noteDurations[]`` pour cr√©er vos propres m√©lodies. Si cela vous int√©resse, il existe un d√©p√¥t GitHub (|link_arduino-songs|) qui propose du code Arduino pour jouer diverses chansons. Bien que leur approche puisse diff√©rer de ce projet, vous pouvez consulter leurs notes et dur√©es √† titre de r√©f√©rence.
