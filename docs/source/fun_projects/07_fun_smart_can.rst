.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte de expertos**: Resuelve problemas postventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Accede anticipadamente a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _fun_smart_can:

Basurero Inteligente
=========================

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/fun_projects/07_fun_smartcan.mp4"  type="video/mp4">
      Your browser does not support the video tag.
   </video>

Este es un c√≥digo Arduino dise√±ado para controlar un basurero inteligente. 
Cuando un objeto se encuentra dentro de un rango de 20 cent√≠metros frente al basurero, su tapa se abre autom√°ticamente. 
Este proyecto utiliza un motor servo SG90 y un sensor de distancia ultras√≥nico HC-SR04.

**Componentes necesarios**

En este proyecto, necesitamos los siguientes componentes.

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Tambi√©n puedes comprarlos por separado desde los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ultrasonic`
        - |link_ultrasonic_buy|
    *   - :ref:`cpn_servo`
        - |link_servo_buy|

**Cableado**

.. image:: img/07_smart_trash_can_bb.png
    :width: 70%
    :align: center


**Esquema**

.. image:: img/07_smart_trash_can_schematic.png
   :width: 90%
   :align: center

**C√≥digo**

.. note::

    * Puedes abrir el archivo ``07_smart_trash_can.ino`` bajo la ruta ``elite-explorer-kit-main\fun_project\07_smart_trash_can`` directamente.
    * O copiar este c√≥digo en Arduino IDE.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/509f1bee-6e38-4106-bea7-9b06cdb3719f/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


**¬øC√≥mo funciona?**

Aqu√≠ hay una explicaci√≥n paso a paso del c√≥digo:

1. Importar bibliotecas y definir constantes/variables:

   Se importa la biblioteca ``Servo.h`` para controlar el motor servo SG90.
   Se definen los par√°metros para el motor servo, el sensor ultras√≥nico y otras constantes y variables necesarias.

2. ``setup()``:

   Inicializa la comunicaci√≥n serial con la computadora a una velocidad de 9600 baudios.
   Configura los pines de disparo y eco del sensor ultras√≥nico.
   Conecta el motor servo a su pin de control y establece su posici√≥n inicial en el √°ngulo cerrado. Despu√©s de establecer el √°ngulo, el motor servo se desactiva para ahorrar energ√≠a.

3. ``loop()``:

   Mide la distancia tres veces y almacena los valores de cada medici√≥n.
   Calcula la distancia promedio de las tres mediciones.
   Si la distancia promedio es menor o igual a 20 cent√≠metros (umbral de distancia definido), el motor servo gira al √°ngulo de apertura (0 grados). 
   De lo contrario, el motor servo vuelve a la posici√≥n cerrada (90 grados) despu√©s de un retraso de un segundo. El motor servo se desactiva cuando no est√° en uso para conservar energ√≠a.

4. ``readDistance()``:

   Env√≠a un pulso al pin de disparo del sensor ultras√≥nico.
   Mide el ancho del pulso del pin de eco y calcula el valor de la distancia.
   Este c√°lculo utiliza la velocidad del sonido en el aire para calcular la distancia basada en el tiempo del pulso.

