.. note::

    Hola, ¬°bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook! Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte de expertos**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Accede anticipadamente a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _fun_guess_number:

JUEGO - Adivina el N√∫mero
==============================

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/fun_projects/10_fun_guess_game.mp4"  type="video/mp4">
      Your browser does not support the video tag.
   </video>

Adivina el N√∫mero es un juego de fiesta entretenido en el que t√∫ y tus amigos se turnan para introducir un n√∫mero (0~99). 
El rango se estrecha con cada n√∫mero ingresado hasta que un jugador adivina correctamente la respuesta. 
El jugador que adivina correctamente es declarado el perdedor y se le aplica una penalizaci√≥n. 
Por ejemplo, si el n√∫mero secreto es 51, que los jugadores no pueden ver, y el jugador 1 ingresa 50, 
el rango de n√∫meros cambia a 50~99. Si el jugador 2 ingresa 70, el rango de n√∫meros se convierte en 50~70. 
Si el jugador 3 ingresa 51, es el desafortunado. 
En este juego, utilizamos un Controlador Remoto IR para ingresar n√∫meros y una pantalla LCD para mostrar los resultados.

**Componentes necesarios**

En este proyecto, necesitamos los siguientes componentes.

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Tambi√©n puedes comprarlos por separado desde los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_i2c_lcd1602`
        - |link_i2clcd1602_buy|
    *   - :ref:`cpn_ir_receiver`
        - |link_receiver_buy|


**Cableado**

.. image:: img/10_guess_number_bb.png
    :width: 90%
    :align: center


**Esquema**

.. image:: img/10_guess_number_schematic.png
   :width: 100%
   :align: center

**C√≥digo**

.. note::

    * Puedes abrir el archivo ``10_guess_number.ino`` bajo la ruta de ``elite-explorer-kit-main\fun_project\10_guess_number`` directamente.
    * O copiar este c√≥digo en Arduino IDE.

.. note::
   Para instalar la biblioteca, utiliza el Administrador de Bibliotecas de Arduino y busca **"IRremote"** y **"LiquidCrystal I2C"** e inst√°lalas.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/935cd2e8-23e1-4af8-bdf5-94ac00f10e8b/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

**¬øC√≥mo funciona?**

1. Importaci√≥n de bibliotecas y definici√≥n de variables globales:

   Se importan tres bibliotecas: ``Wire`` para la comunicaci√≥n I2C, ``LiquidCrystal_I2C`` para controlar la pantalla LCD y ``IRremote`` para recibir se√±ales del control remoto infrarrojo.
   Se definen varias variables globales para almacenar el estado y configuraciones del juego.

2. ``setup()`` 

   Inicializa la pantalla LCD y enciende la retroiluminaci√≥n.
   Inicializa la comunicaci√≥n serie con una velocidad de 9600 baudios.
   Inicia el receptor infrarrojo.
   Llama a la funci√≥n ``initNewValue()`` para establecer el estado inicial del juego.

3. ``loop()`` 

   Comprueba si se recibe una se√±al del control remoto infrarrojo.
   Decodifica la se√±al infrarroja recibida.
   Actualiza el estado del juego o realiza acciones correspondientes basadas en el valor decodificado (n√∫mero o comando).

4. ``initNewValue()`` 

   Utiliza ``analogRead`` para inicializar la semilla de n√∫mero aleatorio, asegurando que se generen n√∫meros aleatorios diferentes cada vez.
   Genera un n√∫mero aleatorio entre 0 y 98 como el n√∫mero afortunado (el n√∫mero que los jugadores deben adivinar).
   Restablece los l√≠mites superior e inferior.
   Muestra un mensaje de bienvenida en la pantalla LCD.
   Restablece el n√∫mero ingresado.

5. ``detectPoint()`` 

   Comprueba la relaci√≥n entre el n√∫mero ingresado por el jugador y el n√∫mero afortunado.
   Si el n√∫mero ingresado es mayor que el n√∫mero afortunado, actualiza el l√≠mite superior.
   Si el n√∫mero ingresado es menor que el n√∫mero afortunado, actualiza el l√≠mite inferior.
   Si el jugador ingresa el n√∫mero correcto, restablece la entrada y devuelve verdadero.

6. ``lcdShowInput()`` 

   Muestra el n√∫mero ingresado por el jugador y los l√≠mites superior e inferior actuales en la pantalla LCD.
   Si el jugador adivina correctamente, muestra un mensaje de √©xito y pausa durante 5 segundos antes de reiniciar el juego.

