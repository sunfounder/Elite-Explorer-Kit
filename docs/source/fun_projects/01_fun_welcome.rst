.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _fun_welcome:

Bienvenue
========================

.. raw:: html

   <video loop controls style = "max-width:100%">
      <source src="../_static/videos/fun_projects/01_fun_welcome.mp4"  type="video/mp4">
      Votre navigateur ne supporte pas la balise vid√©o.
   </video>

Dans ce projet, nous utiliserons un capteur PIR pour d√©tecter la pr√©sence humaine et un haut-parleur pour simuler une sonnette, similaire aux sonnettes d'entr√©e dans les magasins de proximit√©.
Lorsqu'un pi√©ton appara√Æt dans la zone de d√©tection du capteur PIR, le haut-parleur sonne, imitant une sonnette.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_pir`
        - |link_pir_buy|
    *   - :ref:`cpn_audio_speaker`
        - \-


**C√¢blage**

.. image:: img/01_welcome_bb.png
    :width: 90%
    :align: center

.. raw:: html

   <br/>

**Sch√©ma**

.. image:: img/01_welcome_schematic.png
   :width: 100%

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``01_welcome.ino`` sous le chemin ``elite-explorer-kit-main\fun_project\01_welcome`` directement.
    * Ou copiez ce code dans l'IDE Arduino.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/b9791d5d-169d-4603-9fc3-8081138811fa/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>



**Comment √ßa marche ?**

Voici une explication √©tape par √©tape du code :

1. Inclure les fichiers d'en-t√™te :

   Inclure deux fichiers d'en-t√™te, ``analogWave.h`` et ``pitches.h``. Le fichier ``analogWave.h`` contient la d√©finition de la classe ``analogWave``, tandis que ``pitches.h`` contient les d√©finitions des notes musicales.

2. Instancier les objets et d√©finir les constantes :

   Cr√©er un objet ``wave`` en utilisant la classe ``analogWave`` et d√©finir ``PIR_PIN`` comme √©tant 2, qui est la broche connect√©e au capteur PIR.

3. Tableau des m√©lodies :

   Le tableau ``melody`` d√©finit une m√©lodie musicale, chaque note √©tant suivie d'un nombre repr√©sentant sa dur√©e. 
   Les nombres n√©gatifs repr√©sentent des notes point√©es (augmentant la dur√©e de 50%).

4. Variables globales :

   D√©finir quelques variables globales pour partager les donn√©es entre les fonctions.

5. ``setup()`` :

   Initialiser ``PIR_PIN`` comme une entr√©e et d√©finir la fr√©quence de l'onde sinuso√Ødale √† 10 Hz en utilisant ``wave.sine(10)``.

6. ``loop()`` :

   Surveiller continuellement la valeur du capteur PIR.
   Si une pr√©sence humaine est d√©tect√©e (pirValue est HIGH), appeler la fonction ``playMelody()`` pour jouer la m√©lodie et attendre 10 secondes pour √©viter la lecture r√©p√©titive de la m√©lodie.

7. ``playMelody()`` :

   Cette fonction calcule la dur√©e de chaque note en fonction des donn√©es dans le tableau ``melody`` et joue la note correspondante. Il y a une courte pause entre les notes.
   La fonction d√©finit la fr√©quence de l'onde en utilisant ``wave.freq()`` et contr√¥le la dur√©e des notes et les pauses entre les notes en utilisant la fonction ``delay()``.

   Note : Assurez-vous que le fichier d'en-t√™te ``pitches.h`` existe bien avant d'ex√©cuter ce code.

