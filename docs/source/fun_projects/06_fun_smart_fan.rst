.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _fun_smart_fan:

Ventilateur Intelligent
=================================

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/fun_projects/06_fun_smartfan.mp4"  type="video/mp4">
      Votre navigateur ne supporte pas la balise vid√©o.
   </video>

Ce projet Arduino ajuste automatiquement la vitesse du ventilateur pour maintenir la temp√©rature dans une plage appropri√©e. De plus, les utilisateurs peuvent entrer en mode manuel via un bouton pour faire fonctionner le ventilateur √† vitesse maximale.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_motor`
        - |link_motor_buy|
    *   - :ref:`cpn_ta6586`
        - \-
    *   - :ref:`cpn_power`
        - \-

**C√¢blage**

.. note::
    Pour prot√©ger la batterie de la :ref:`cpn_power`, veuillez la charger compl√®tement avant de l'utiliser pour la premi√®re fois.

.. image:: img/06_smart_fan_bb.png
    :width: 100%
    :align: center

.. raw:: html

   <br/>

**Sch√©ma**

.. image:: img/06_smart_fan_schematic.png
   :width: 80%
   :align: center

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``06_smart_fan.ino`` sous le chemin ``elite-explorer-kit-main\fun_project\06_smart_fan`` directement.
    * Ou copiez ce code dans l'IDE Arduino.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/ba484912-14d6-4125-83a0-73a107904144/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

**Comment √ßa marche ?**

Voici une explication √©tape par √©tape du code :


1. D√©finition des constantes et des variables :

   Utilisez ``#define`` pour d√©finir les broches pour les diverses connexions mat√©rielles.
   ``TEMP_THRESHOLD`` est d√©fini √† 25¬∞C, ce qui est le seuil de temp√©rature pour d√©marrer le ventilateur.
   ``manualMode`` : Une variable bool√©enne qui indique si le mode manuel est activ√©.


2. ``setup()`` :

   D√©finissez le mode des broches pertinentes (sortie, entr√©e, entr√©e avec pull-up).
   Initialement r√©gl√© en mode automatique, donc ``LED_AUTO`` est allum√© tandis que ``LED_MANUAL`` est √©teint.


3. ``loop()`` :

   Surveillez l'√©tat du bouton. Lorsque le bouton est press√©, il bascule le mode et change le statut de la LED.
   En mode manuel, le ventilateur fonctionne √† vitesse maximale.
   En mode automatique, le code lit d'abord la valeur de tension du capteur de temp√©rature et la convertit en une valeur de temp√©rature.
   Si la temp√©rature d√©passe le seuil, la vitesse du ventilateur est ajust√©e en fonction de la temp√©rature.

4. ``voltageToTemperature()`` :

   Il s'agit d'une fonction auxiliaire utilis√©e pour convertir la valeur de tension du capteur de temp√©rature en une valeur de temp√©rature (en Celsius).
   La fonction utilise la formule standard pour une thermistance afin d'estimer la temp√©rature.
   La valeur de retour est en degr√©s Celsius.

