.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _fun_access:

Syst√®me de Contr√¥le d'Acc√®s
======================================

.. raw:: html

   <video loop controls style = "max-width:100%">
      <source src="../_static/videos/fun_projects/09_fun_access.mp4"  type="video/mp4">
      Votre navigateur ne supporte pas la balise vid√©o.
   </video>

La fonction principale de ce code est d'effectuer l'authentification des utilisateurs √† l'aide d'un module RFID. 
Si l'authentification est r√©ussie, il contr√¥le un moteur pas √† pas pour ouvrir la porte et √©met un son via un buzzer pour indiquer le r√©sultat de l'authentification. 
Si l'authentification √©choue, la porte ne s'ouvrira pas.

Vous pouvez ouvrir le moniteur s√©rie pour voir l'ID de votre carte RFID et reconfigurer le mot de passe dans ce code.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_mfrc522`
        - |link_mfrc522_rfid_buy|
    *   - :ref:`cpn_stepper_motor`
        - |link_stepper_motor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_power`
        - \-


**C√¢blage**

.. note::
    Pour prot√©ger la batterie de la :ref:`cpn_power`, veuillez la charger compl√®tement avant de l'utiliser pour la premi√®re fois.

.. image:: img/09_access_bb.png
    :width: 100%
    :align: center

.. raw:: html

   <br/>

**Sch√©ma**

.. image:: img/09_access_schematic.png
    :width: 100%
    :align: center

.. raw:: html

   <br/>

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``09_access_control_system.ino`` sous le chemin ``elite-explorer-kit-main\fun_project09_access_control_system`` directement.
    * Ou copiez ce code dans l'IDE Arduino.

.. note::

    * La biblioth√®que ``RFID1`` est utilis√©e ici. La biblioth√®que se trouve dans le r√©pertoire ``elite-explorer-kit-main/library/``, ou vous pouvez cliquer ici :download:`RFID1.zip </_static/RFID1.zip>` pour la t√©l√©charger. Reportez-vous √† :ref:`manual_install_lib` pour un tutoriel sur son installation.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/3486dd4e-a76e-478f-b5a4-a86281f7f374/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


**Comment √ßa marche ?**

Voici une explication √©tape par √©tape du code :

1. **Inclure les fichiers de biblioth√®que** : Vous avez inclus trois fichiers de biblioth√®que : ``rfid1.h``, ``Stepper.h`` et ``Wire.h``. Ces biblioth√®ques sont utilis√©es pour communiquer avec le module RFID, le moteur pas √† pas et pour la communication I2C.

2. **D√©finitions des constantes** : Vous avez d√©fini certaines constantes, notamment ``ID_LEN`` (longueur de l'ID), ``stepsPerRevolution`` (pas par r√©volution pour le moteur pas √† pas), ``rolePerMinute`` (vitesse du moteur pas √† pas), ainsi que les quatre broches du moteur pas √† pas (IN1, IN2, IN3, IN4), la broche du buzzer (``buzPin``) et les variables li√©es √† l'authentification.

3. **D√©finitions des variables** : Vous avez d√©fini des variables telles qu'un tableau pour stocker l'ID utilisateur lu (``userIdRead``), l'ID utilisateur authentifi√© (``userId``) et une variable bool√©enne (``approved``) pour indiquer le succ√®s de l'authentification.

4. **Instantiation des objets** : Vous avez cr√©√© des instances de deux objets : ``RFID1 rfid`` et ``Stepper stepper`` pour interagir avec le module RFID et le moteur pas √† pas, respectivement.

5. ``setup()`` : Dans la fonction ``setup()``, vous initialisez la vitesse du moteur pas √† pas, d√©finissez la broche du buzzer comme une sortie et initialisez le module RFID.

6. ``loop()`` : Dans la fonction ``loop()``, votre logique principale s'ex√©cute. Si ``approved`` est 0 (indiquant non authentifi√©), il appelle la fonction ``rfidRead()`` pour lire les donn√©es du module RFID, puis efface le tableau ``userIdRead``. Si ``approved`` est 1 (indiquant une authentification r√©ussie), il appelle la fonction ``openDoor()`` pour ouvrir la porte et r√©initialise ``approved`` √† 0.

7. ``beep()`` : Cette fonction contr√¥le le son du buzzer en fonction des param√®tres ``duration`` et ``frequency`` fournis.

8. ``verifyPrint()`` : Cette fonction produit diff√©rents sons de buzzer en fonction du param√®tre ``result`` pour indiquer si l'authentification a r√©ussi ou √©chou√©.

9. ``openDoor()`` : Cette fonction contr√¥le le moteur pas √† pas pour ouvrir la porte √† un certain angle (``doorStep``) puis attend une p√©riode avant de refermer la porte.

10. ``rfidRead()`` : Cette fonction lit les donn√©es du module RFID, appelle d'abord ``getId()`` pour obtenir l'ID utilisateur, puis ``idVerify()`` pour v√©rifier si l'ID utilisateur correspond √† l'ID authentifi√©.

11. ``getId()`` : Cette fonction r√©cup√®re l'ID utilisateur du module RFID et le stocke dans le tableau ``userIdRead``. Elle √©met un bip en cas d'√©chec de la lecture.

12. ``idVerify()`` : Cette fonction v√©rifie si l'ID utilisateur correspond √† l'ID authentifi√© et produit un son indiquant une authentification r√©ussie ou √©chou√©e.

