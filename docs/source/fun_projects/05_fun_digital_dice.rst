.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _fun_digital_dice:

D√© num√©rique
=======================================

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/fun_projects/05_fun_dice.mp4"  type="video/mp4">
      Votre navigateur ne supporte pas la balise vid√©o.
   </video>

Ce code est con√ßu pour simuler un lancer de d√© en utilisant un registre √† d√©calage 74HC595 et un afficheur num√©rique √† 7 segments. La simulation du lancer de d√© est activ√©e en secouant directement l'interrupteur √† bascule. D√®s cette action, l'afficheur num√©rique fait d√©filer des nombres al√©atoires entre 1 et 6, simulant le lancer d'un d√©. Apr√®s un bref intervalle, l'affichage s'arr√™te, montrant un nombre al√©atoire qui indique le r√©sultat du lancer de d√©.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_tilt_switch`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|
    *   - :ref:`cpn_7segment`
        - |link_7segment_buy|

**C√¢blage**

.. image:: img/05_dice_bb.png
    :width: 80%
    :align: center

.. raw:: html

   <br/>

**Sch√©ma**

.. image:: img/05_digital_dice_schematic.png
   :width: 100%

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``05_digital_dice.ino`` sous le chemin ``elite-explorer-kit-main\fun_project\05_digital_dice`` directement.
    * Ou copiez ce code dans l'IDE Arduino.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/ff0528b0-a10d-49e8-8916-6cb1fdfdf9a2/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

**Comment √ßa marche ?**

Voici une explication d√©taill√©e du code :

1. Initialisation des variables :

   ``dataPin``, ``clockPin``, ``latchPin`` : Broches pour le 74HC595.
   ``buttonPin`` : La broche num√©rique o√π le bouton est connect√©.
   ``numbers[]`` : Un tableau pour stocker le codage repr√©sentant les chiffres de 1 √† 6 sur un afficheur num√©rique √† anode commune.


2. Variables volatiles :

   rolling : C'est une variable volatile indiquant si le d√© est en cours de roulement. 
   Elle est d√©clar√©e comme volatile car elle est accessible √† la fois dans la routine de service d'interruption et dans le programme principal.

3. ``setup()`` :

   Configure les modes des broches pertinentes.
   Configure la broche du bouton en mode entr√©e en utilisant la r√©sistance pull-up interne.
   Assigne une interruption au bouton, qui appelle la fonction ``rollDice`` lorsque l'√©tat du bouton change.

4. ``loop()`` :

   V√©rifie si ``rolling`` est vrai. Si c'est le cas, il continue d'afficher un nombre al√©atoire entre 1 et 6. Si le bouton a √©t√© press√© pendant plus de 500 millisecondes, le roulement s'arr√™te.

5. ``rollDice()`` :

   C'est la routine de service d'interruption pour le bouton. Elle v√©rifie si le bouton est press√© (niveau bas). Si c'est le cas, l'heure actuelle est enregistr√©e et le roulement commence.

6. ``displayNumber()`` :

   Cette fonction affiche un nombre sur le tube num√©rique. Elle envoie le nombre au tube num√©rique via le registre √† d√©calage 74HC595.

