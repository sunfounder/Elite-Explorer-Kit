.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _iot_weathertime_screen:

√âcran M√©t√©oTemps
===============================

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/iot_projects/06_iot_weather_oled.mp4" type="video/mp4">
      Your browser does not support the video tag.
   </video>

Ce sketch se connecte √† un r√©seau Wi-Fi, r√©cup√®re les donn√©es m√©t√©orologiques d'OpenWeatherMap toutes les minutes, obtient l'heure actuelle d'un serveur NTP et affiche le jour, l'heure et les informations m√©t√©orologiques sur un √©cran OLED.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_oled`
        - |link_oled_buy|

**C√¢blage**

.. image:: img/06_weather_oled_bb.png
    :width: 100%
    :align: center

**Sch√©ma**

.. image:: img/06_weather_oled_schematic.png
    :width: 60%
    :align: center

**OpenWeather**

Obtenez des cl√©s API OpenWeather

.. .|link_openweather| est un service en ligne, propri√©t√© de OpenWeather Ltd, qui fournit des donn√©es m√©t√©orologiques mondiales via API, y compris des donn√©es m√©t√©orologiques actuelles, des pr√©visions, des nowcasts et des donn√©es m√©t√©orologiques historiques pour n'importe quel emplacement g√©ographique.

`OpenWeather <https://openweathermap.org/>`_ est un service en ligne, propri√©t√© de OpenWeather Ltd, qui fournit des donn√©es m√©t√©orologiques mondiales via API, y compris des donn√©es m√©t√©orologiques actuelles, des pr√©visions, des nowcasts et des donn√©es m√©t√©orologiques historiques pour n'importe quel emplacement g√©ographique.

#. Visitez OpenWeather pour vous connecter/cr√©er un compte.

   .. image:: img/06_owm_1.png

#. Cliquez sur la page API depuis la barre de navigation.

   .. image:: img/06_owm_2.png

#. Trouvez **Current Weather Data** et cliquez sur Subscribe.

   .. image:: img/06_owm_3.png

#. Sous **Current weather and forecasts collection**, abonnez-vous au service appropri√©. Dans notre projet, la version gratuite est suffisante.

   .. image:: img/06_owm_4.png

#. Copiez la cl√© depuis la page **API keys**.

   .. image:: img/06_owm_5.png

#. Copiez-la dans le fichier ``arduino_secrets.h``.

   .. code-block:: Arduino

       #define SECRET_SSID "<SSID>"        // votre SSID r√©seau (nom)
       #define SECRET_PASS "<PASSWORD>"    // votre mot de passe r√©seau 
       #define API_KEY "<OpenWeather_API_KEY>"
       #define LOCATION "<YOUR CITY>"

#. D√©finissez le fuseau horaire de votre emplacement.

   Prenons la capitale de la Su√®de, Stockholm, comme exemple. Recherchez "stockholm timezone" sur Google.

   .. image:: img/06_weather_oled_01.png 

   Dans les r√©sultats de recherche, vous verrez "GMT+1", donc vous d√©finissez le param√®tre de la fonction ci-dessous √† ``3600 * 1`` secondes.
   
   .. code-block:: Arduino

      timeClient.setTimeOffset(3600 * 1);  // Ajustez pour votre fuseau horaire (c'est +1 heure)

**Installer la biblioth√®que**

Pour installer la biblioth√®que, utilisez le gestionnaire de biblioth√®ques Arduino et recherchez "ArduinoMqttClient", "FastLED", "Adafruit GFX" et "Adafruit SSD1306" et installez-les.

``ArduinoJson.h``: Utilis√© pour g√©rer les donn√©es JSON (donn√©es obtenues d'OpenWeatherMap).

``NTPClient.h``: Utilis√© pour obtenir l'heure en temps r√©el.

``Adafruit_GFX.h``, ``Adafruit_SSD1306.h``: Utilis√© pour le module OLED.

**Ex√©cuter le code**

.. note::

    * Vous pouvez ouvrir le fichier ``06_weather_oled.ino`` sous le chemin ``elite-explorer-kit-main\iot_project\06_weather_oled`` directement.
    * Ou copier ce code dans Arduino IDE.

.. note::
    Dans le code, le SSID et le mot de passe sont stock√©s dans ``arduino_secrets.h``. Avant de t√©l√©charger cet exemple, vous devez les modifier avec vos propres identifiants WiFi. De plus, pour des raisons de s√©curit√©, assurez-vous que ces informations restent confidentielles lors du partage ou du stockage du code.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/5f667ac1-bb24-4681-9fa1-db19fcfdd48a/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

**Comment √ßa marche ?**

1. Biblioth√®ques et d√©finitions :

   #. ``WiFiS3.h`` : Probablement une biblioth√®que sp√©cifique √† un certain module Wi-Fi ou carte pour g√©rer les connexions Wi-Fi.
   #. ``ArduinoJson.h`` : Cette biblioth√®que est utilis√©e pour d√©coder (et encoder) les donn√©es JSON.
   #. ``arduino_secrets.h`` : Un fichier s√©par√© o√π les donn√©es sensibles (comme les identifiants Wi-Fi) sont stock√©es. C'est une bonne pratique de garder les identifiants hors du code principal.
   #. **NTPClient & WiFiUdp** : Utilis√©s pour r√©cup√©rer l'heure actuelle d'un serveur NTP (Network Time Protocol).
   #. **Biblioth√®ques Adafruit** : Utilis√©es pour g√©rer l'affichage OLED.
   #. **Diverses variables globales** : Y compris les identifiants Wi-Fi, les d√©tails du serveur et plus, qui seront utilis√©s tout au long du script.

2. ``setup()`` :

   #. Initialise la communication s√©rie.
   #. V√©rifie et affiche la version du firmware du module Wi-Fi.
   #. Tente de se connecter au r√©seau Wi-Fi en utilisant le SSID et le mot de passe fournis.
   #. Affiche le statut du Wi-Fi connect√© (SSID, IP, force du signal).
   #. Initialise l'√©cran OLED.
   #. D√©marre le client NTP pour obtenir l'heure actuelle et d√©finit un d√©calage horaire (dans ce cas, 8 heures, ce qui peut correspondre √† un fuseau horaire sp√©cifique).

3. ``read_response()`` :

   #. Lit la r√©ponse du serveur, en recherchant sp√©cifiquement les donn√©es JSON (indiqu√©es par ``{`` et ``}``).
   #. Si des donn√©es JSON sont trouv√©es, elles sont d√©cod√©es pour extraire des d√©tails m√©t√©orologiques tels que la temp√©rature, l'humidit√©, la pression, la vitesse du vent et la direction du vent.
   #. Appelle la fonction ``displayWeatherData`` pour afficher les informations m√©t√©orologiques sur l'√©cran OLED.

4. ``httpRequest()`` :

   #. Ferme toute connexion existante pour s'assurer que le socket du module Wi-Fi est libre.
   #. Tente de se connecter au serveur OpenWeatherMap.
   #. Si connect√©, envoie une requ√™te GET HTTP pour r√©cup√©rer les donn√©es m√©t√©orologiques pour un emplacement sp√©cifique d√©fini par ``LOCATION`` (probablement d√©fini dans ``arduino_secrets.h`` ou ailleurs).
   #. Enregistre l'heure √† laquelle la requ√™te a √©t√© effectu√©e.

5. ``loop()`` :

   #. Appelle la fonction ``read_response`` pour traiter les donn√©es entrantes du serveur.
   #. Met √† jour l'heure depuis le serveur NTP.
   #. V√©rifie s'il est temps de faire une autre requ√™te au serveur m√©t√©orologique (bas√© sur ``postingInterval``). Si c'est le cas, appelle la fonction ``httpRequest``.

6. ``printWifiStatus()`` :

   #. Le SSID du r√©seau connect√©.
   #. L'adresse IP locale de la carte.
   #. La force du signal (RSSI).

7. ``displayWeatherData()`` :

   #. Efface l'√©cran OLED.
   #. Affiche le jour actuel de la semaine.
   #. Affiche l'heure actuelle au format HH:MM.
   #. Affiche les donn√©es m√©t√©orologiques fournies (temp√©rature, humidit√©, pression et vitesse du vent).

