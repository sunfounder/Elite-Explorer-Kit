.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Bluetooth Environmental Monitor
=================================

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/iot_projects/08_iot_ble_home.mp4" type="video/mp4">
      Your browser does not support the video tag.
   </video>

Ce projet utilise une application Android cr√©√©e avec MIT App Inventor pour recevoir et afficher des donn√©es environnementales provenant d'une carte Arduino. La carte Arduino r√©cup√®re les donn√©es d'un capteur DHT11 pour mesurer la temp√©rature et l'humidit√©. Une fois les donn√©es collect√©es, elles sont transmises via Bluetooth. L'application affiche les donn√©es √† l'√©cran d√®s qu'elle les re√ßoit.

L'application Android sera construite en utilisant une plateforme web gratuite appel√©e |link_appinventor|. Ce projet est une excellente occasion de se familiariser avec l'interfa√ßage d'un Arduino avec un smartphone.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_dht11`
        - |link_humiture_buy|

**1. Construire le circuit**

.. image:: img/08-bluetooth_environmental_monitor_bb.png
    :width: 80%
    :align: center

.. image:: img/08_ble_home_schematic.png
    :width: 30%
    :align: center

.. raw:: html

   <br/>

**2. Cr√©er l'application Android**

L'application Android sera d√©velopp√©e en utilisant une application web gratuite 
appel√©e |link_appinventor|. MIT App Inventor est un excellent point de d√©part 
pour le d√©veloppement Android, gr√¢ce √† ses fonctionnalit√©s intuitives de glisser-d√©poser 
qui permettent de cr√©er des applications simples.

Commen√ßons maintenant.

#. Allez sur |link_appinventor_login|, et cliquez sur "online tool" pour vous connecter. Vous aurez besoin d'un compte Google pour vous inscrire sur MIT App Inventor.

   .. image:: img/08_ai_signup.png
       :width: 90%
       :align: center

#. Apr√®s vous √™tre connect√©, naviguez vers **Projects** -> **Import project (.aia) from my computer**. Ensuite, t√©l√©chargez le fichier ``ble_environmental_monitor.aia`` situ√© dans le chemin ``elite-explorer-kit-main\iot_project\08-bluetooth_environmental_monitor``.

   Vous pouvez √©galement le t√©l√©charger directement ici : :download:`ble_environmental_monitor.aia</_static/other/ble_environmental_monitor.aia>`

   .. image:: img/08_ai_import.png
        :align: center

#. Apr√®s avoir t√©l√©charg√© le fichier ``.aia``, vous verrez l'application dans le logiciel MIT App Inventor. Il s'agit d'un mod√®le pr√©-configur√©. Vous pouvez modifier ce mod√®le apr√®s vous √™tre familiaris√© avec MIT App Inventor en suivant les √©tapes ci-dessous.

#. Dans MIT App Inventor, vous avez 2 sections principales : le **Designer** et les **Blocks**. Vous pouvez passer d'une section √† l'autre en haut √† droite de la page.

   .. image:: img/08_ai_intro_1.png

#. Le **Designer** vous permet d'ajouter des boutons, du texte, des √©crans et de modifier l'esth√©tique g√©n√©rale de votre application.

   .. image:: img/08_ai_intro_2.png
      :width: 100%
   
#. Ensuite, il y a la section **Blocks**. Cette section vous permet de cr√©er des fonctionnalit√©s personnalis√©es pour votre application, vous permettant de programmer chaque composant de l'interface utilisateur de l'application pour obtenir les fonctionnalit√©s souhait√©es.

   .. image:: img/08_ai_intro_3.png
      :width: 100%

#. Pour installer l'application sur un smartphone, naviguez vers l'onglet **Build**.

   .. image:: img/08_ai_intro_4.png

   * Vous pouvez g√©n√©rer un fichier ``.apk``. Apr√®s avoir s√©lectionn√© cette option, une page appara√Ætra vous permettant de choisir entre t√©l√©charger un fichier ``.apk`` ou scanner un code QR pour l'installation. Suivez le guide d'installation pour compl√©ter l'installation de l'application. 

     Vous pouvez √©galement t√©l√©charger notre APK pr√©-compil√© ici : :download:`ble_environmental_monitor.apk</_static/other/ble_environmental_monitor.apk>`

   * Si vous souhaitez t√©l√©charger cette application sur Google Play ou une autre marketplace d'applications, vous pouvez g√©n√©rer un fichier ``.aab``.


**3. T√©l√©chargez le code**

#. Ouvrez le fichier ``08-bluetooth_environmental_monitor.ino`` sous le chemin ``elite-explorer-kit-main\iot_project\08-bluetooth_environmental_monitor``, ou copiez ce code dans **Arduino IDE**.
   
   .. note:: 
      Pour installer la biblioth√®que, utilisez le gestionnaire de biblioth√®ques Arduino pour rechercher et installer **"DHT sensor library"** et **"ArduinoBLE"**.

   .. raw:: html
       
      <iframe src=https://create.arduino.cc/editor/sunfounder01/53fd4af4-dcc6-439d-b52f-2f94f17c1263/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Apr√®s avoir s√©lectionn√© la carte et le port corrects, cliquez sur le bouton **Upload**.

#. Ouvrez le moniteur s√©rie (r√©glez le d√©bit en bauds sur **9600**) pour voir les messages de d√©bogage. 

**4. Connexion de l'application et du module Bluetooth**

Assurez-vous que l'application cr√©√©e pr√©c√©demment est install√©e sur votre smartphone.

#. Tout d'abord, activez le **Bluetooth** sur votre smartphone.

   .. image:: img/08_app_1.png
      :width: 60%
      :align: center

#. Ouvrez maintenant la nouvelle application **Environmental Monitor**.

   .. image:: img/08_app_2.png
      :width: 25%
      :align: center

#. Lorsque vous ouvrez cette application pour la premi√®re fois, deux invites d'autorisation appara√Ætront successivement. Ce sont les autorisations requises pour utiliser le Bluetooth.

   .. image:: img/08_app_3.png
      :width: 100%
      :align: center

   .. raw:: html

      <br/>

#. Dans l'application, cliquez sur le bouton **Connect** pour √©tablir une connexion entre l'application et le module Bluetooth.

   .. image:: img/08_app_4.png
      :width: 55%
      :align: center

#. Cette page affiche une liste de tous les appareils Bluetooth appari√©s. Choisissez l'option ``xx.xx.xx.xx.xx.xx UNO R4 Home`` dans la liste. Le nom de chaque appareil est indiqu√© √† c√¥t√© de son adresse MAC.

   .. image:: img/08_app_5.png
      :width: 60%
      :align: center
   
   .. raw:: html

      <br/>

#. Si vous ne voyez aucun appareil sur la page affich√©e ci-dessus, vous pouvez essayer d'activer le commutateur de localisation de l'appareil (certaines versions du syst√®me Android associent le commutateur de localisation √† la fonction Bluetooth).

   .. image:: img/08_app_6.png
      :width: 60%
      :align: center

   .. raw:: html

      <br/>

#. Apr√®s une connexion r√©ussie, vous serez redirig√© vers la page principale o√π la temp√©rature et l'humidit√© seront affich√©es.

   .. image:: img/08_app_7.png
      :width: 60%
      :align: center

**5. Explication du code**

1. Importation des biblioth√®ques et d√©finition des constantes

   - Importez les biblioth√®ques n√©cessaires et d√©finissez les constantes pour le broche et le type de capteur DHT.

   .. note:: 
      Pour installer la biblioth√®que, utilisez le gestionnaire de biblioth√®ques Arduino pour rechercher et installer **"DHT sensor library"** et **"ArduinoBLE"**.

   .. code-block:: arduino
   
       #include <DHT.h>
       #include <ArduinoBLE.h>
       #define DHTPIN 11
       #define DHTTYPE DHT11

2. Initialisation des services et caract√©ristiques BLE

   - D√©finissez les UUID pour le service de d√©tection environnementale BLE et les caract√©ristiques. Nous utilisons les UUID pr√©d√©finis fournis par |link_bluetooth_sig|. Le |link_sig_environmental_sensing| est assign√© ``0x181A``, tandis que ``0x2A6E`` et ``0x2A6F`` sont r√©serv√©s pour |link_sig_temperature_humidity|, respectivement.

   .. code-block:: arduino
   
       BLEService environmentalSensingService("181A");
       BLEShortCharacteristic temperatureCharacteristic("2A6E", BLERead | BLENotify);
       BLEUnsignedShortCharacteristic humidityCharacteristic("2A6F", BLERead | BLENotify);

3. Fonction Setup

   - Initialisez la communication s√©rie, le capteur DHT et le BLE.

   .. code-block:: arduino
   
       void setup() {
         Serial.begin(9600);
         dht.begin();
         if (!BLE.begin()) {
           Serial.println("starting Bluetooth¬Æ Low Energy module failed!");
           while (1)
             ;
         }
         setupBle();
       }

4. Boucle principale

   - Interrogez les √©v√©nements BLE et mettez √† jour les donn√©es du capteur √† intervalles r√©guliers.

   - La ligne ``millis() - lastUpdateTime > updateInterval`` garantit que les donn√©es du capteur sont mises √† jour toutes les updateInterval millisecondes.

   .. code-block:: arduino
   
       void loop() {
         BLE.poll();
         if (millis() - lastUpdateTime > updateInterval) {
           // Lisez les donn√©es du capteur et mettez √† jour les caract√©ristiques BLE
         }
       }

5. Fonctions BLE et de d√©bogage

   - Fonctions pour configurer le BLE, imprimer des informations de d√©bogage et g√©rer les √©v√©nements BLE.

   .. code-block:: arduino
   
       void printDHT(float h, float t) { /* ... */ }
       void setupBle() { /* ... */ }
       void blePeripheralConnectHandler(BLEDevice central) { /* ... */ }
       void blePeripheralDisconnectHandler(BLEDevice central) { /* ... */ }

   - ``printDHT(float h, float t)`` : Utilis√© pour imprimer les donn√©es de temp√©rature et d'humidit√© lues par le DHT11 sur le moniteur s√©rie. Cette fonction est destin√©e au d√©bogage.

   - ``setupBle()`` : Initialise le Bluetooth, y compris le nom de diffusion, les caract√©ristiques et les services.

   - ``blePeripheralConnectHandler(BLEDevice central)`` et ``blePeripheralDisconnectHandler(BLEDevice central)`` : Ces fonctions g√®rent les √©v√©nements lorsque Bluetooth se connecte ou se d√©connecte. Lorsqu'un appareil se connecte avec succ√®s √† l'UNO R4 via Bluetooth, la LED embarqu√©e s'allume. Lorsque l'appareil se d√©connecte, la LED s'√©teint.

