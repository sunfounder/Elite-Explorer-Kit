.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !
    
.. _iot_Bluetooth_lcd:

Bluetooth Message Box
=============================

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/iot_projects/07_iot_ble_lcd.mp4" type="video/mp4">
      Your browser does not support the video tag.
   </video>

Ce projet re√ßoit des messages et les affiche sur un √©cran LCD.

Vous pouvez l'utiliser comme tableau de messages familial, rappelant aux membres de la famille qui n'ont pas encore quitt√© la maison de ne pas oublier leurs cl√©s.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_i2c_lcd1602`
        - |link_i2clcd1602_buy|

**C√¢blage**

.. image:: img/07_lightblue_lcd_bb.png
    :width: 100%
    :align: center

**Sch√©ma**

.. image:: img/07_lightblue_lcd_schematic.png
   :width: 80%
   :align: center

.. raw:: html

   <br/>

**G√©n√©rer l'UUID**

Les UUID jouent un r√¥le crucial dans la communication BLE, assurant l'unicit√© des appareils et l'exactitude des √©changes de donn√©es entre eux. Vous devez personnaliser les UUID pour cr√©er vos propres services et caract√©ristiques BLE afin de r√©pondre aux exigences sp√©cifiques de l'application. (Ici, nous devons cr√©er une caract√©ristique qui prend en charge la saisie de texte.)

1. Utilisez l'outil `Online UUID Generator Tool <https://www.uuidgenerator.net/version4>`_ pour cr√©er des UUID uniques √† vous afin d'√©viter les conflits d'UUID.

2. G√©n√©rez deux UUID version 4.

   .. image:: img/07_uuid_1.png
      :width: 70%

   .. raw:: html

      <br/><br/>

3. Copiez-les et remplacez les deux UUID dans votre code.

   .. code-block:: arduino
   
       #define SERVICE_UUID "uuid1"
       #define CHARACTERISTIC_UUID "uuid2"

**Installer la biblioth√®que**

``ArduinoBLE.h``: Utilis√© pour g√©rer la communication Bluetooth Low Energy (BLE).
``LiquidCrystal_I2C.h``: Utilis√© pour contr√¥ler un √©cran LCD 16x2 avec interface I2C.

**Ex√©cuter le code**

.. note::

    * Vous pouvez ouvrir le fichier ``07_lightblue_lcd.ino`` sous le chemin ``elite-explorer-kit-main\iot_project\07_lightblue_lcd`` directement.
    * Ou copier ce code dans Arduino IDE.

.. note:: 
      Pour installer la biblioth√®que, utilisez le gestionnaire de biblioth√®ques Arduino pour rechercher et installer **"ArduinoBLE"** et **"LiquidCrystal I2C"**.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/958c37c2-a897-4c4c-b6c1-0e7fea67c7b1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


**Comment jouer ?**

Pour interagir avec les services et caract√©ristiques cr√©√©s dans ce sketch, vous devez utiliser une application centrale Bluetooth¬Æ Low Energy g√©n√©rique telle que LightBlue (disponible pour iOS et Android) ou nRF Connect (pour Android).

Utilisons LightBlue comme exemple pour montrer comment contr√¥ler la LED de l'Arduino via Bluetooth.

1. T√©l√©chargez l'application LightBlue depuis l'App Store (pour iOS) ou Google Play (pour Android).

   .. image:: img/07_lightblue.png

2. Connecter l'Arduino √† votre smartphone via Bluetooth

   Allez dans vos param√®tres Bluetooth et localisez le p√©riph√©rique nomm√© "UNO R4 BLE". Connectez-vous √† celui-ci.

   .. image:: img/07_iot_ble_01.jpg
      :width: 50%

   .. raw:: html

      <br/><br/>

3. Interagir avec l'Arduino via Bluetooth en utilisant LightBlue

   Lancez LightBlue et appuyez sur l'onglet **Bonded** en bas de l'interface. Ici, vous verrez une liste des appareils BLE avec lesquels votre smartphone a d√©j√† √©t√© coupl√©. Localisez **UNO R4 BLE** et appuyez sur **CONNECT**.

   .. image:: img/07_iot_ble_02.jpg

   Une fois connect√©, vous aurez acc√®s √† des informations d√©taill√©es sur le p√©riph√©rique Bluetooth. Faites d√©filer vers le bas pour trouver votre UUID de service et votre UUID de caract√©ristique.

   Appuyez sur la caract√©ristique. Vous remarquerez que cette caract√©ristique est √† la fois lisible et inscriptible, vous permettant de la lire et de l'√©crire.

   Continuez √† faire d√©filer jusqu'√† la section "Data format" et changez-la en UTF-8 String.
   Entrez du texte dans la zone de texte et cliquez sur write. Le message que vous avez entr√© appara√Ætra sur le LCD.

   .. image:: img/07_iot_ble_03.jpg

**Comment √ßa marche ?**

Voici les principales parties du code et des explications de leurs fonctions :

1. Inclure les biblioth√®ques n√©cessaires :

   * ``ArduinoBLE.h``: Utilis√© pour g√©rer la communication BLE.
   * ``Wire.h``: Utilis√© pour la communication I2C.
   * ``LiquidCrystal_I2C.h``: Utilis√© pour contr√¥ler un √©cran LCD 16x2 avec interface I2C.

2. D√©finir un service BLE et une caract√©ristique BLE :

   * Utilisez la classe ``BLEService`` pour d√©finir un service BLE et lui attribuer un UUID unique.
   * Utilisez la classe ``BLECharacteristic`` pour d√©finir une caract√©ristique BLE, lui attribuer un UUID unique et lui donner les autorisations de lecture (``BLERead``) et d'√©criture (``BLEWrite``).
   * Cr√©ez un tableau de caract√®res ``stringValue`` comme valeur initiale de la caract√©ristique.

3. Initialiser un √©cran LCD 16x2 (LCD) :

   * Utilisez la classe ``LiquidCrystal_I2C`` pour initialiser un LCD, en sp√©cifiant l'adresse I2C (0x27) et le nombre de lignes et de colonnes (16x2).
   * Allumez le r√©tro√©clairage du LCD, effacez l'√©cran, d√©placez le curseur au d√©but de la premi√®re ligne et affichez "Bluetooth LCD".

4. Effectuer l'initialisation dans la fonction ``setup()`` :

   * Initialisez la communication s√©rie.
   * Initialisez le module BLE, et si l'initialisation √©choue, entrez dans une boucle infinie.
   * D√©finissez le nom local et l'UUID de service pour le p√©riph√©rique BLE.
   * Ajoutez la caract√©ristique BLE au service BLE.
   * Commencez √† diffuser le service BLE afin que les p√©riph√©riques centraux puissent le d√©couvrir et s'y connecter.
   * Initialisez le LCD.

5. La fonction ``loop()`` :

   * V√©rifiez s'il y a un p√©riph√©rique central connect√© au p√©riph√©rique BLE en appelant ``BLE.central()``. Si un p√©riph√©rique central est connect√©, entrez dans la logique de gestion de connexion.
   * Dans l'√©tat connect√©, v√©rifiez si des donn√©es ont √©t√© √©crites dans la caract√©ristique BLE en v√©rifiant ``boxCharacteristic.written()``.
   * Si des donn√©es ont √©t√© √©crites, obtenez la longueur des donn√©es √©crites en utilisant ``boxCharacteristic.valueLength()`` et cr√©ez un tableau d'octets ``buffer`` pour stocker les donn√©es √©crites.
   * Utilisez ``boxCharacteristic.readValue()`` pour lire les donn√©es de la caract√©ristique BLE dans le ``buffer``.
   * Ajoutez un caract√®re nul ``'\0'`` √† la fin du ``buffer`` pour le convertir en cha√Æne de caract√®res.
   * Imprimez le message re√ßu dans le moniteur s√©rie et affichez-le sur le LCD.
   * Continuez √† attendre le prochain p√©riph√©rique central √† se connecter apr√®s que le p√©riph√©rique central se soit d√©connect√©.

