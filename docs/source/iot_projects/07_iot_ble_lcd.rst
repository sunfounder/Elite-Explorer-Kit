.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones festivas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _iot_Bluetooth_lcd:

Caja de Mensajes Bluetooth
================================

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/iot_projects/07_iot_ble_lcd.mp4"  type="video/mp4">
      Your browser does not support the video tag.
   </video>

Este proyecto recibe mensajes y los muestra en una pantalla LCD.

Puedes usarlo como un tablero de mensajes familiar, recordando a los miembros de la familia que no han salido a√∫n, que recuerden llevar sus llaves.

**Componentes Requeridos**

En este proyecto, necesitamos los siguientes componentes. 

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - √çtems en este Kit
        - Enlace
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Tambi√©n puedes comprarlos por separado desde los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - Introducci√≥n del Componente
        - Enlace de Compra

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_i2c_lcd1602`
        - |link_i2clcd1602_buy|

**Conexiones**

.. image:: img/07_lightblue_lcd_bb.png
    :width: 100%
    :align: center

**Esquem√°tico**

.. image:: img/07_lightblue_lcd_schematic.png
   :width: 80%
   :align: center

.. raw:: html

   <br/>

**Generar el UUID**

Los UUIDs juegan un papel crucial en la comunicaci√≥n BLE, asegurando la unicidad de los dispositivos y la precisi√≥n del intercambio de datos entre ellos. Necesitas personalizar los UUIDs para crear tus propios servicios y caracter√≠sticas BLE para satisfacer requisitos espec√≠ficos de la aplicaci√≥n. (Aqu√≠, necesitamos crear una caracter√≠stica que soporte entrada de texto).

1. Usa la `Herramienta Generadora de UUIDs en L√≠nea <https://www.uuidgenerator.net/version4>`_ para crear UUIDs √∫nicos para ti y evitar conflictos de UUIDs.

2. Genera dos UUIDs de versi√≥n 4.

   .. image:: img/07_uuid_1.png
      :width: 70%

   .. raw:: html

      <br/><br/>

3. C√≥pialos y reemplaza los dos UUIDs en tu c√≥digo.

   .. code-block:: arduino
   
       #define SERVICE_UUID "uuid1"
       #define CHARACTERISTIC_UUID "uuid2"

**Instalar la Biblioteca**

``ArduinoBLE.h``: Usada para manejar la comunicaci√≥n Bluetooth Low Energy (BLE).
``LiquidCrystal_I2C.h``: Usada para controlar una pantalla LCD de 16x2 caracteres con interfaz I2C.

**Ejecutar el C√≥digo**

.. note::

    * Puedes abrir el archivo ``07_lightblue_lcd.ino`` bajo la ruta ``elite-explorer-kit-main\iot_project\07_lightblue_lcd`` directamente.
    * O copiar este c√≥digo en el IDE de Arduino.

.. note:: 
      Para instalar la biblioteca, usa el Administrador de Bibliotecas de Arduino para buscar e instalar **"ArduinoBLE"** y **"LiquidCrystal I2C"**.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/958c37c2-a897-4c4c-b6c1-0e7fea67c7b1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


**¬øC√≥mo jugar?**

Para interactuar con los servicios y caracter√≠sticas creados en este sketch, deber√≠as usar una aplicaci√≥n central gen√©rica de Bluetooth¬Æ Low Energy como LightBlue (disponible para iOS y Android) o nRF Connect (para Android).

Vamos a usar LightBlue como ejemplo para demostrar c√≥mo controlar el LED del Arduino v√≠a Bluetooth.

1. Descarga la aplicaci√≥n LightBlue desde la App Store (para iOS) o Google Play (para Android).

   .. image:: img/07_lightblue.png

2. Conectando el Arduino con tu Smartphone v√≠a Bluetooth

   Ve a la configuraci√≥n de Bluetooth y localiza el dispositivo llamado "UNO R4 BLE". Con√©ctate a √©l.

   .. image:: img/07_iot_ble_01.jpg
      :width: 50%

   .. raw:: html

      <br/><br/>

3. Interactuando con Arduino v√≠a Bluetooth usando LightBlue

   Abre LightBlue y toca en la pesta√±a **Bonded** en la parte inferior de la interfaz. Aqu√≠ ver√°s una lista de dispositivos BLE con los que tu smartphone se ha emparejado previamente. Localiza **UNO R4 BLE** y toca **CONNECT**.

   .. image:: img/07_iot_ble_02.jpg

   Una vez conectado, tendr√°s acceso a informaci√≥n detallada sobre el dispositivo Bluetooth. Despl√°zate hacia abajo para encontrar tu UUID de servicio y tu UUID de Caracter√≠stica.

   Toca en la Caracter√≠stica. noter√°s que esta Caracter√≠stica es tanto legible como escribible, permiti√©ndote leer y escribir en ella.

   Contin√∫a desplaz√°ndote hasta la secci√≥n "Formato de datos" y c√°mbiala a Cadena UTF-8.
   Ingresa texto en el cuadro de texto y haz clic en escribir. El mensaje que ingresaste aparecer√° en el LCD.

   .. image:: img/07_iot_ble_03.jpg

**¬øC√≥mo funciona?**

Aqu√≠ est√°n las partes principales del c√≥digo y explicaciones de sus funciones:

1. Incluir las bibliotecas necesarias:

   * ``ArduinoBLE.h``: Usada para manejar la comunicaci√≥n BLE.
   * ``Wire.h``: Usada para la comunicaci√≥n I2C.
   * ``LiquidCrystal_I2C.h``: Usada para controlar una pantalla LCD de 16x2 caracteres con interfaz I2C.

2. Definir un servicio BLE y una caracter√≠stica BLE:

   * Usa la clase ``BLEService`` para definir un servicio BLE y asignarle un UUID √∫nico.
   * Usa la clase ``BLECharacteristic`` para definir una caracter√≠stica BLE, asignarle un UUID √∫nico, y darle permisos de lectura (``BLERead``) y escritura (``BLEWrite``).
   * Crea un array de caracteres ``stringValue`` como el valor inicial de la caracter√≠stica.

3. Inicializar una pantalla LCD de 16x2 caracteres (LCD):

   * Usa la clase ``LiquidCrystal_I2C`` para inicializar una LCD, especificando la direcci√≥n I2C (0x27) y el n√∫mero de filas y columnas (16x2).
   * Enciende la luz de fondo de la LCD, limpia la pantalla, mueve el cursor al inicio de la primera fila, y muestra "Bluetooth LCD."

4. Realizar la inicializaci√≥n en la funci√≥n ``setup()``:

   * Inicializa la comunicaci√≥n serial.
   * Inicializa el m√≥dulo BLE, y si la inicializaci√≥n falla, entra en un bucle infinito.
   * Establece el nombre local y el UUID del servicio para el perif√©rico BLE.
   * Agrega la caracter√≠stica BLE al servicio BLE.
   * Comienza a anunciar el servicio BLE para que los dispositivos centrales puedan descubrirlo y conectarse a √©l.
   * Inicializa la LCD.

5. La funci√≥n ``loop()``:

   * Verifica si hay un dispositivo central conectado al perif√©rico BLE llamando a ``BLE.central()``. Si hay un dispositivo central conectado, entra en la l√≥gica de manejo de conexi√≥n.
   * En el estado conectado, verifica si se han escrito datos en la caracter√≠stica BLE comprobando ``boxCharacteristic.written()``.
   * Si se han escrito datos, obtiene la longitud de los datos escritos usando ``boxCharacteristic.valueLength()`` y crea un array de bytes ``buffer`` para almacenar los datos escritos.
   * Usa ``boxCharacteristic.readValue()`` para leer datos de la caracter√≠stica BLE en el ``buffer``.
   * Agrega un car√°cter nulo ``'\0'`` al final del ``buffer`` para convertirlo en una cadena.
   * Imprime el mensaje recibido en el monitor serial y lo muestra en la LCD.
   * Contin√∫a esperando a que el pr√≥ximo dispositivo central se conecte despu√©s de que el dispositivo central se desconecte.

