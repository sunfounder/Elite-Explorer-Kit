.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Arduino IoT Cloud
===========================

Cet exemple montre comment communiquer avec le Cloud Arduino IoT. Il permet de se connecter au Cloud Arduino IoT et d'interagir avec les variables cloud. Ici, nous envoyons les valeurs de temp√©rature lues par le capteur DHT11 au Cloud Arduino IoT, nous permettant ainsi de les surveiller depuis le cloud.

.. image:: img/02_cloud.png

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_dht11`
        - |link_humiture_buy|

**C√¢blage**

.. image:: img/02_arduino_iot_cloud_bb.png
    :width: 90%
    :align: center

.. raw:: html
    
    <br/>


**Sch√©ma**

.. image:: img/02_arduino_iot_cloud_schematic.png
  :width: 40%
  :align: center


**Installer l'agent Arduino Create**

1. Visitez l'adresse https://create.arduino.cc/getting-started/plugin/welcome.

2. Cliquez sur START.

  .. image:: img/02_install_agent_2.png
     :width: 95%

3. Choisissez la version adapt√©e √† votre ordinateur, et un paquet d'installation sera t√©l√©charg√©.

  .. image:: img/02_install_agent_3.png
     :width: 95%

4. Installez l'agent.

  .. image:: img/02_install_agent_4.png
    :width: 85%

5. Apr√®s l'installation, retournez √† votre navigateur, et vous verrez l'interface suivante.

  .. image:: img/02_install_agent_5.png
     :width: 95%

6. Cliquez sur NEXT, puis vous pouvez acc√©der √† l'√©diteur web.

  .. image:: img/02_install_agent_6.png
     :width: 95%

**Utiliser le Cloud Arduino IoT**

1. Tout d'abord, vous devez vous connecter ou vous inscrire sur Arduino. 

  https://login.arduino.cc/login

2. Une fois connect√©, cliquez sur IoT Cloud dans le coin sup√©rieur droit.

   .. image:: img/02_iot_cloud_2.png


3. Cr√©ez une nouvelle chose.

   .. image:: img/02_iot_cloud_3.png
  
4. Associez votre appareil.

   .. image:: img/02_iot_cloud_4.png


5. Configurez un nouvel appareil.

   .. image:: img/02_iot_cloud_5.png


6. Choisissez votre carte Arduino.
 
   .. image:: img/02_iot_cloud_6.png


7. Attendez un moment, et votre UNO R4 WiFi sera d√©tect√©. Continuez en cliquant sur configure.
 
   .. image:: img/02_iot_cloud_7.png

 
8. Donnez un nom √† votre appareil.

  .. image:: img/02_iot_cloud_8.png


9. Rendez votre appareil compatible IoT, et n'oubliez pas de sauvegarder la cl√© secr√®te.

  .. image:: img/02_iot_cloud_9.png


10. Attendez quelques minutes.

  .. image:: img/02_iot_cloud_10.png


.. 5. S√©lectionnez Arduino UNO R4 WiFi.

.. .. image:: img/sp231016_164654.png

11. Configurez le WiFi.

  .. image:: img/02_iot_cloud_11.png


12. Ici, vous devrez entrer votre mot de passe WiFi et la cl√© secr√®te.

  .. image:: img/02_iot_cloud_12.png


13. Ajoutez une variable.

  .. image:: img/02_iot_cloud_13.png


14. Ici, nous voulons afficher la temp√©rature dans le Cloud IoT, donc nous configurons une variable float en lecture seule.

  .. image:: img/02_iot_cloud_14.png


15. Apr√®s avoir termin√©, allez au sketch.

  .. image:: img/02_iot_cloud_15.png


16. Ouvrez l'√©diteur complet.

  .. image:: img/02_iot_cloud_16.png


17. Cliquez sur Libraries √† droite, puis sur Library Manager.

  .. image:: img/02_iot_cloud_17.png


18. Recherchez la biblioth√®que du capteur DHT et cochez-la.

  .. image:: img/02_iot_cloud_18.png


19. Maintenant, nous devons √©diter le code. Vous pouvez voir que l'√©diteur a d√©j√† pr√©par√© le code li√© au Cloud IoT pour vous. Vous n'avez qu'√† ajouter les fonctionnalit√©s sp√©cifiques dont vous avez besoin. Dans cet exemple, nous avons ajout√© du code pour lire la temp√©rature √† l'aide du capteur DHT11.

  .. code-block::
      :emphasize-lines: 1,2,3,22,23,24,32,55,56
  
      // Biblioth√®que du capteur DHT - Version: Derni√®re 
      #include <DHT.h>
      #include <DHT_U.h>
  
      /* 
      Sketch g√©n√©r√© par le Cloud Arduino IoT "Sans titre"
      https://create.arduino.cc/cloud/things/260edac8-34f9-4e2e-9214-ba0c20994220 
  
      Description des variables du Cloud Arduino IoT
  
      Les variables suivantes sont automatiquement g√©n√©r√©es et mises √† jour lorsque des modifications sont apport√©es √† la chose
  
      float temperature;
  
      Les variables marqu√©es comme LECTURE/√âCRITURE dans la chose Cloud auront √©galement des fonctions
      qui sont appel√©es lorsque leurs valeurs sont modifi√©es depuis le tableau de bord.
      Ces fonctions sont g√©n√©r√©es avec la chose et ajout√©es √† la fin de ce sketch.
      */
  
      #include "thingProperties.h"
  
      #define DHTPIN 11     
      #define DHTTYPE DHT11 
      DHT dht(DHTPIN, DHTTYPE);
  
      void setup() {
          // Initialisez la communication s√©rie et attendez l'ouverture du port :
          Serial.begin(9600);
          // Ce d√©lai donne la possibilit√© d'attendre un moniteur s√©rie sans bloquer s'il n'est pas trouv√©
          delay(1500); 
  
          dht.begin();
  
          // D√©fini dans thingProperties.h
          initProperties();
  
          // Connectez-vous au Cloud Arduino IoT
          ArduinoCloud.begin(ArduinoIoTPreferredConnection);
          
          /*
              La fonction suivante vous permet d'obtenir plus d'informations
              relatives √† l'√©tat du r√©seau et √† la connexion au Cloud IoT ainsi que des erreurs
              plus le nombre est √©lev√©, plus l'information est granulaire.
              La valeur par d√©faut est 0 (seulement les erreurs).
              Le maximum est 4
          */
          setDebugMessageLevel(2);
          ArduinoCloud.printDebugInfo();
      }
  
      void loop() {
          ArduinoCloud.update();
          // Votre code ici 
          
          float temp = dht.readTemperature();  
          temperature = temp;
          
      }
 
20. T√©l√©chargez le code. Vous pourriez √™tre invit√© √† mettre √† jour ; suivez les invites pour terminer.

  .. image:: img/02_iot_cloud_20.png


21. Retournez au CLOUD IoT.

  .. image:: img/02_iot_cloud_21.png


22. Cliquez sur le menu dans le coin sup√©rieur gauche.
  
  .. image:: img/02_iot_cloud_22.png


23. Cliquez sur le tableau de bord.
  
  .. image:: img/02_iot_cloud_23.png


24. Cr√©ez un tableau de bord.
  
  .. image:: img/02_iot_cloud_24.png


25. De nombreux widgets sont disponibles ; ici, nous choisissons un widget de valeur pour afficher la temp√©rature.

  .. image:: img/02_iot_cloud_25.png


26. Apr√®s avoir cliqu√©, une interface de param√®tres de widget appara√Ætra, o√π vous pourrez connecter le widget √† la variable cloud que vous avez cr√©√©e pr√©c√©demment.

  .. image:: img/02_iot_cloud_26.png


27. Maintenant, vous pouvez voir les lectures des capteurs sur le Cloud Arduino IoT.

  .. image:: img/02_iot_cloud_27.png


**Comment √ßa fonctionne ?**

Apr√®s avoir configur√© le Cloud IoT (configuration de l'appareil, configuration du r√©seau, cr√©ation de variables cloud), vous remarquerez que le sketch sur le cloud se met √† jour automatiquement. Ainsi, la plupart du code est d√©j√† √©crit pour vous.

Ouvrez l'√©diteur, et vous verrez que ce sketch contient quatre fichiers :

``main.ino``: Utilis√© pour initialiser l'Arduino et ex√©cuter les t√¢ches principales de la boucle. De plus, il inclut la logique de connexion et de communication avec le Cloud Arduino IoT.

``thingProperties.h``: Ce fichier est utilis√© pour d√©finir des variables et des fonctions dans le Cloud Arduino IoT. Il contient les d√©clarations des variables cloud et leurs fonctions de rappel associ√©es. Dans le code fourni, il est utilis√© pour initialiser les propri√©t√©s cloud (par exemple, la variable temp√©rature) et se connecter au Cloud Arduino IoT.

``Secret``: Utilis√© pour stocker des informations sensibles ou priv√©es, telles que les mots de passe WiFi ou les cl√©s API. Ces informations sensibles ne sont g√©n√©ralement pas expos√©es directement dans le code mais sont stock√©es dans le fichier Secret pour am√©liorer la s√©curit√©.

``ReadMe.adoc``: Contient la documentation du projet ou d'autres informations pertinentes pour une meilleure compr√©hension et utilisation du projet. Ce fichier ne contient g√©n√©ralement pas de code ex√©cutable mais plut√¥t des informations documentaires et descriptives.

Nous devons ajouter du code pour le capteur DHT11. Ce code est identique √† celui que vous utiliseriez sur votre IDE local. La seule diff√©rence est que vous devez assigner la valeur lue par le DHT11 √† la variable cloud ``temperature``.

(Remarque : Vous ne devez jamais modifier ``thingProperties.h`` et ``Secret``. Ils seront modifi√©s lorsque vous apportez des changements en utilisant l'√©diteur Thing.)

