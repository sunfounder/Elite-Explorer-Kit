.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _iot_mqtt_publish:

Syst√®me d'appel via MQTT
============================================

.. raw:: html

   <video loop autoplay muted style = "max-width:100%">
      <source src="../_static/videos/iot_projects/04_iot_mqtt_callling.mp4" type="video/mp4">
      Your browser does not support the video tag.
   </video>

Le Message Queuing Telemetry Transport (MQTT) est un protocole de messagerie simple. Il est √©galement le protocole de messagerie le plus largement utilis√© dans le domaine de l'Internet des objets (IoT).

Les protocoles MQTT d√©finissent comment les appareils IoT √©changent des donn√©es. Ils fonctionnent de mani√®re √©v√©nementielle et sont interconnect√©s en utilisant le mod√®le Publish/Subscribe. L'exp√©diteur (Publisher) et le r√©cepteur (Subscriber) communiquent via des Topics. Un appareil publie un message sur un sujet sp√©cifique, et tous les appareils abonn√©s √† ce sujet re√ßoivent le message.

Dans cette section, nous allons cr√©er un syst√®me de sonnerie de service utilisant UNO R4, HiveMQ (un service gratuit de broker MQTT public) et quatre boutons. Chacun des quatre boutons correspond √† une table de restaurant, et lorsque qu'un client appuie sur un bouton, vous pourrez voir quelle table a besoin de service sur HiveMQ.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Elite Explorer Kit
        - 300+
        - |link_Elite_Explorer_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`uno_r4_wifi`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|


**C√¢blage**

.. image:: img/04_mqtt_button_bb.png
   :width: 70%
   :align: center

**Sch√©ma**

.. image:: img/04_mqtt_button_schematic.png
   :width: 50%
   :align: center

**Comment jouer ?**

HiveMQ est une plateforme de messagerie bas√©e sur un broker et un client MQTT qui facilite le transfert rapide, efficace et fiable de donn√©es vers les appareils IoT.

1. Ouvrez |link_hivemq| dans votre navigateur web.

2. Connectez le client au proxy public par d√©faut.

   .. image:: img/04_mqtt_1.png

3. Cliquez sur **Add New Topic Subscription**.

   .. image:: img/04_mqtt_2.png

4. Entrez les sujets que vous souhaitez suivre et cliquez sur **Subscribe**. Assurez-vous que les sujets que vous d√©finissez ici sont uniques pour √©viter de recevoir des messages d'autres utilisateurs, et faites attention √† la sensibilit√© √† la casse. 

   Dans ce code d'exemple, nous avons d√©fini le sujet comme ``SunFounder MQTT Test``. Si vous avez apport√© des modifications, assurez-vous que le sujet dans le code correspond au sujet abonn√© sur la page web.

   .. image:: img/04_mqtt_3.png


**Installer la biblioth√®que**

Pour installer la biblioth√®que, utilisez le gestionnaire de biblioth√®ques Arduino et recherchez "ArduinoMqttClient" et installez-la.

``ArduinoMqttClient.h`` : Utilis√© pour la communication MQTT.

**Ex√©cuter le Code**

.. note::

    * Vous pouvez ouvrir le fichier ``04_mqtt_button.ino`` sous le chemin ``elite-explorer-kit-main\iot_project\04_mqtt_button`` directement.
    * Ou copier ce code dans Arduino IDE.

.. note::
    Dans le code, le SSID et le mot de passe sont stock√©s dans ``arduino_secrets.h``. Avant de t√©l√©charger cet exemple, vous devez les modifier avec vos propres identifiants WiFi. De plus, pour des raisons de s√©curit√©, assurez-vous que ces informations restent confidentielles lors du partage ou du stockage du code.

.. raw:: html

   <iframe src=https://create.arduino.cc/editor/sunfounder01/7a4acdf8-beed-47d4-ada8-cbaab0f3477f/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s avoir ex√©cut√© le code, revenez √† |link_hivemq|, et lorsque vous appuyez sur l'un des boutons de la breadboard, vous verrez l'invite Messages sur HiveMQ.

    .. image:: img/04_mqtt_4.png
  
**Comment √ßa marche ?**

Ce code est pour un projet bas√© sur Arduino qui se connecte au Wi-Fi et communique avec un broker MQTT en utilisant le protocole MQTT. De plus, il peut d√©tecter si quatre boutons sont press√©s et envoyer les messages correspondants au broker MQTT.

Voici une explication d√©taill√©e du code :

1. **Inclure les biblioth√®ques pertinentes** :

   .. code-block:: Arduino
       
       #include <WiFiS3.h>
       #include <ArduinoMqttClient.h>

2. **Inclure les informations sensibles** :

   * Le fichier ``arduino_secrets.h`` contient le SSID et le mot de passe du r√©seau Wi-Fi.
   
   .. code-block:: Arduino
       
       #include "arduino_secrets.h" 
       char ssid[] = SECRET_SSID;   
       char pass[] = SECRET_PASS;   

3. **Initialiser les variables** :

   * Variables pour g√©rer les connexions Wi-Fi et MQTT.
   * Initialiser les broches des boutons et les √©tats des boutons.

4. ``setup()`` :

   * Initialiser la communication s√©rie.
   * V√©rifier la pr√©sence du module Wi-Fi et tenter de se connecter au Wi-Fi.
   * Imprimer les donn√©es r√©seau.
   * Tenter de se connecter au broker MQTT.
   * S'abonner aux sujets MQTT.
   * D√©finir les boutons en mode entr√©e.

5. ``loop()`` :

   * Maintenir la connexion MQTT active.
   * V√©rifier si chaque bouton est press√©, et si oui, envoyer des messages MQTT.

6. **Autres fonctions utilitaires** :

   * ``printWifiData()`` : Imprime les informations sur le r√©seau Wi-Fi actuellement connect√©.
   * ``printCurrentNet()`` : Imprime les donn√©es pertinentes sur le r√©seau actuel.
   * ``printMacAddress(byte mac[])`` : Imprime l'adresse MAC.
   * ``onMqttMessage(int messageSize)`` : Fonction de rappel d√©clench√©e lorsqu'un message est re√ßu du broker MQTT. Elle imprime le sujet et le contenu du message re√ßu.
   * ``sendButtonMessage(int buttonNumber)`` : Utilisez cette fonction pour envoyer des messages MQTT lorsque un bouton est press√©.

