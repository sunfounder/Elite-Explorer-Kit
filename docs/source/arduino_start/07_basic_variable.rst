.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

Variable
========

Die Variable ist eines der m√§chtigsten und kritischsten Werkzeuge in einem Programm. Sie hilft uns, Daten in unseren Programmen zu speichern und abzurufen.

Das folgende Sketch-File verwendet Variablen. Es speichert die Pin-Nummern der LED an Bord in der Variablen ``ledPin`` und eine Zahl ‚Äû500‚Äú in der Variablen ``delayTime``.

.. code-block:: C
    :emphasize-lines: 1,2

    int ledPin = 13;
    int delayTime = 500;

    void setup() {
        pinMode(ledPin,OUTPUT); 
    }

    void loop() {
        digitalWrite(ledPin,HIGH); 
        delay(delayTime); 
        digitalWrite(ledPin,LOW); 
        delay(delayTime);
    }

Warte, ist das eine Duplikation dessen, was ``#define`` macht? Die Antwort ist NEIN.

* Die Rolle von ``#define`` ist es, einfach und direkt Text zu ersetzen, es wird vom Compiler nicht als Teil des Programms betrachtet. 
* Eine ``Variable`` hingegen existiert innerhalb des Programms und wird verwendet, um Werte zu speichern und abzurufen. Eine Variable kann auch ihren Wert innerhalb des Programms √§ndern, was ein define nicht kann.

Das untenstehende Sketch-File f√ºgt sich selbst zur Variablen hinzu und wird dazu f√ºhren, dass die LED an Bord nach jedem Blinken l√§nger blinkt.

.. code-block:: C

    int ledPin = 13;
    int delayTime = 500;

    void setup() {
        pinMode(ledPin,OUTPUT); 
    }

    void loop() {
        digitalWrite(ledPin,HIGH); 
        delay(delayTime); 
        digitalWrite(ledPin,LOW); 
        delay(delayTime);
        delayTime = delayTime+200; //Each execution increments the value by 200
    }

Eine Variable deklarieren
-----------------------------

Eine Variable zu deklarieren bedeutet, eine Variable zu erstellen. 

Um eine Variable zu deklarieren, ben√∂tigen Sie zwei Dinge: den Datentyp und den Variablennamen. Der Datentyp muss durch ein Leerzeichen von der Variable getrennt sein, und die Variablendeklaration muss mit einem ``;`` beendet werden.

Verwenden wir diese Variable als Beispiel.

.. code-block:: C

    int delayTime;

**Datentyp**

Hier ist ``int`` ein Datentyp, der als Integer-Typ bezeichnet wird und verwendet werden kann, um ganze Zahlen von -32768 bis 32766 zu speichern. Es kann jedoch keine Dezimalzahlen speichern.

Variablen k√∂nnen andere Arten von Daten als ganze Zahlen speichern. Die Arduino-Sprache (die, wie wir uns erinnern, C++ ist) hat eingebaute Unterst√ºtzung f√ºr einige davon (nur die am h√§ufigsten verwendeten und n√ºtzlichsten sind hier aufgef√ºhrt):

* ``float``: Speichert eine Dezimalzahl, zum Beispiel 3,1415926.
* ``byte``: Kann Zahlen von 0 bis 255 speichern.
* ``boolean``: H√§lt nur zwei m√∂gliche Werte, ``True`` oder ``False``, obwohl es ein Byte im Speicher belegt.
* ``char``: H√§lt eine Zahl von -127 bis 127. Da es als ``char`` gekennzeichnet ist, versucht der Compiler, es einer Zeichen aus dem |link_ascii| zuzuordnen.
* ``string``: Kann eine Zeichenkette speichern, z.B. ``Halloween``.


**Variablenname**


Sie k√∂nnen der Variablen jeden Namen geben, den Sie m√∂chten, wie ``i``, ``apple``, ``Bruce``, ``R2D2``, ``Sectumsempra``, aber es gibt einige grundlegende Regeln zu befolgen.

1. Beschreiben Sie, wof√ºr sie verwendet wird. Hier habe ich die Variable delayTime genannt, damit Sie leicht verstehen k√∂nnen, was sie macht. Es funktioniert auch, wenn ich die Variable ``barryAllen`` nenne, aber es verwirrt die Person, die den Code betrachtet.

2. Verwenden Sie eine regul√§re Nomenklatur. Sie k√∂nnen CamelCase verwenden, wie ich es getan habe, mit dem anf√§nglichen T in ``delayTime``, damit leicht zu erkennen ist, dass die Variable aus zwei W√∂rtern besteht. Sie k√∂nnen auch UnderScoreCase verwenden, um die Variable als ``delay_time`` zu schreiben. Es hat keinen Einfluss auf den Programmablauf, aber es w√ºrde dem Programmierer helfen, den Code zu lesen, wenn Sie die von Ihnen bevorzugte Nomenklatur verwenden.

3. Verwenden Sie keine Schl√ºsselw√∂rter. √Ñhnlich wie bei der Eingabe von ‚Äûint‚Äú f√§rbt die Arduino-IDE es, um Sie daran zu erinnern, dass es ein Wort mit einer besonderen Bedeutung ist und nicht als Variablenname verwendet werden kann. √Ñndern Sie den Namen der Variablen, wenn sie gef√§rbt ist.

4. Spezielle Symbole sind nicht erlaubt. Zum Beispiel Raum, #, $, /, +, % usw. Die Kombination aus englischen Buchstaben (Gro√ü-/Kleinschreibung beachten), Unterstrichen und Zahlen (aber Zahlen k√∂nnen nicht als erstes Zeichen eines Variablennamens verwendet werden) ist reichhaltig genug.


**Einer Variablen einen Wert zuweisen**

Sobald wir die Variable deklariert haben, ist es an der Zeit, die Daten zu speichern. Wir verwenden den Zuweisungsoperator (d.h. ``=``), um den Wert in die Variable zu setzen.

Wir k√∂nnen Werte der Variablen zuweisen, sobald wir sie deklarieren.


.. code-block:: C

    int delayTime = 500;

Es ist auch m√∂glich, ihr zu einem sp√§teren Zeitpunkt einen neuen Wert zuzuweisen.

.. code-block:: C

    int delayTime; // no value
    delayTime = 500; // value is 500
    delayTime = delayTime +200; // value is 700