.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions de f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Variable
========

La variable est l'un des outils les plus puissants et critiques d'un programme. Elle nous aide √† stocker et √† appeler des donn√©es dans nos programmes.

Le fichier sketch suivant utilise des variables. Il stocke les num√©ros de broche de la LED embarqu√©e dans la variable ``ledPin`` et un nombre "500" dans la variable ``delayTime``.

.. code-block:: C
    :emphasize-lines: 1,2

    int ledPin = 13;
    int delayTime = 500;

    void setup() {
        pinMode(ledPin,OUTPUT); 
    }

    void loop() {
        digitalWrite(ledPin,HIGH); 
        delay(delayTime); 
        digitalWrite(ledPin,LOW); 
        delay(delayTime);
    }

Attendez, est-ce que cela fait un doublon avec ce que fait ``#define`` ? La r√©ponse est NON.

* Le r√¥le de ``#define`` est de simplement et directement remplacer du texte, il n'est pas consid√©r√© par le compilateur comme faisant partie du programme. 
* Une ``variable``, en revanche, existe dans le programme et est utilis√©e pour stocker et appeler des valeurs. Une variable peut √©galement modifier sa valeur dans le programme, ce que define ne peut pas faire.

Le fichier sketch ci-dessous ajoute automatiquement √† la variable et cela fera clignoter la LED embarqu√©e plus longtemps apr√®s chaque clignotement.

.. code-block:: C

    int ledPin = 13;
    int delayTime = 500;

    void setup() {
        pinMode(ledPin,OUTPUT); 
    }

    void loop() {
        digitalWrite(ledPin,HIGH); 
        delay(delayTime); 
        digitalWrite(ledPin,LOW); 
        delay(delayTime);
        delayTime = delayTime+200; // Chaque ex√©cution augmente la valeur de 200
    }

D√©clarer une variable
-------------------------

D√©clarer une variable signifie cr√©er une variable. 

Pour d√©clarer une variable, vous avez besoin de deux choses : le type de donn√©es et le nom de la variable. Le type de donn√©es doit √™tre s√©par√© du nom de la variable par un espace, et la d√©claration de la variable doit se terminer par un ``;``.

Prenons cette variable comme exemple.

.. code-block:: C

    int delayTime;

**Type de donn√©es**

Ici, ``int`` est un type de donn√©es appel√© type entier, qui peut √™tre utilis√© pour stocker des nombres entiers de -32768 √† 32766. Il ne peut pas non plus √™tre utilis√© pour stocker des d√©cimales.

Les variables peuvent contenir diff√©rents types de donn√©es autres que des entiers. Le langage Arduino (qui, rappelez-vous, est du C++) prend en charge quelques-uns d'entre eux (seuls les plus fr√©quemment utilis√©s et utiles sont list√©s ici) :

* ``float`` : Stocker un nombre d√©cimal, par exemple 3.1415926.
* ``byte`` : Peut contenir des nombres de 0 √† 255.
* ``boolean`` : Ne contient que deux valeurs possibles, ``True`` ou ``False``, m√™me s'il occupe un octet en m√©moire.
* ``char`` : Contient un nombre de -127 √† 127. Comme il est marqu√© comme un ``char``, le compilateur essaiera de le faire correspondre √† un caract√®re de la |link_ascii|.
* ``string`` : Peut stocker une cha√Æne de caract√®res, par exemple ``Halloween``.

**Nom de la variable**

Vous pouvez nommer la variable comme vous le souhaitez, par exemple ``i``, ``apple``, ``Bruce``, ``R2D2``, ``Sectumsempra``, mais il y a quelques r√®gles de base √† suivre.

1. D√©crivez son utilisation. Ici, j'ai nomm√© la variable delayTime, donc vous pouvez facilement comprendre ce qu'elle fait. Cela fonctionne si je nomme la variable ``barryAllen``, mais cela confond la personne qui regarde le code.

2. Utilisez une nomenclature r√©guli√®re. Vous pouvez utiliser CamelCase comme je l'ai fait, avec le T initial dans ``delayTime`` pour qu'il soit facile de voir que la variable se compose de deux mots. Vous pouvez aussi utiliser UnderScoreCase pour √©crire la variable comme ``delay_time``. Cela n'affecte pas l'ex√©cution du programme, mais cela aide le programmeur √† lire le code si vous utilisez la nomenclature que vous pr√©f√©rez.

3. N'utilisez pas de mots cl√©s. Comme lorsque nous tapons "int", l'IDE Arduino le colorera pour vous rappeler que c'est un mot avec un but sp√©cial et ne peut pas √™tre utilis√© comme nom de variable. Changez le nom de la variable si elle est color√©e. 

4. Les symboles sp√©ciaux ne sont pas autoris√©s. Par exemple, espace, #, $, /, +, %, etc. La combinaison de lettres anglaises (sensibles √† la casse), de traits de soulignement et de chiffres (mais les chiffres ne peuvent pas √™tre utilis√©s comme premier caract√®re d'un nom de variable) est suffisamment riche.

**Attribuer une valeur √† une variable**

Une fois que nous avons d√©clar√© la variable, il est temps de stocker les donn√©es. Nous utilisons l'op√©rateur d'affectation (c'est-√†-dire ``=``) pour mettre une valeur dans la variable.

Nous pouvons attribuer des valeurs √† la variable d√®s que nous la d√©clarons.

.. code-block:: C

    int delayTime = 500;

Il est √©galement possible de lui attribuer une nouvelle valeur √† un moment donn√©.

.. code-block:: C

    int delayTime; // pas de valeur
    delayTime = 500; // la valeur est 500
    delayTime = delayTime + 200; // la valeur est 700
