.. note::

    ¬°Hola, bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Sum√©rgete m√°s profundamente en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

Estructura del programa Arduino
=======================================

Vamos a echar un vistazo al nuevo archivo de sketch. Aunque tiene unas pocas l√≠neas de c√≥digo, en realidad es un sketch "vac√≠o". 
Subir este sketch a la placa de desarrollo no causar√° ning√∫n efecto.

.. code-block:: C

    void setup() {
    // pon tu c√≥digo de configuraci√≥n aqu√≠, para ejecutarse una vez:

    }

    void loop() {
    // pon tu c√≥digo principal aqu√≠, para ejecutarse repetidamente:

    }

Si eliminamos ``setup()`` y ``loop()`` y hacemos que el sketch sea un archivo realmente ``en blanco``, ver√°s que no pasa la verificaci√≥n. 
Son el equivalente al esqueleto humano y son indispensables.

Durante la ejecuci√≥n del sketch, primero se ejecuta ``setup()``, y el c√≥digo dentro de ella (dentro de ``{}``) se ejecuta despu√©s de que la placa est√© encendida o reiniciada, y solo una vez. 
``loop()`` se usa para escribir la funci√≥n principal, y el c√≥digo dentro de ella se ejecutar√° en un bucle despu√©s de que ``setup()`` se haya ejecutado.

Para entender mejor ``setup()`` y ``loop()``, vamos a utilizar cuatro sketches. Su prop√≥sito es hacer que el LED a bordo del Arduino parpadee. Por favor, ejecuta cada experimento por turno y registra sus efectos espec√≠ficos.

* Sketch 1: Hacer que el LED a bordo parpadee continuamente.

.. code-block:: C
    :emphasize-lines: 8,9,10,11

    void setup() {
        // pon tu c√≥digo de configuraci√≥n aqu√≠, para ejecutarse una vez:
        pinMode(13,OUTPUT); 
    }

    void loop() {
        // pon tu c√≥digo principal aqu√≠, para ejecutarse repetidamente:
        digitalWrite(13,HIGH);
        delay(500);
        digitalWrite(13,LOW);
        delay(500);
    }

* Sketch 2: Hacer que el LED a bordo parpadee solo una vez. 

.. code-block:: C
    :emphasize-lines: 4,5,6,7

    void setup() {
        // pon tu c√≥digo de configuraci√≥n aqu√≠, para ejecutarse una vez:
        pinMode(13,OUTPUT);
        digitalWrite(13,HIGH);
        delay(500);
        digitalWrite(13,LOW);
        delay(500);
    }

    void loop() {
        // pon tu c√≥digo principal aqu√≠, para ejecutarse repetidamente:
    }

* Sketch 3: Hacer que el LED a bordo parpadee lentamente una vez y luego parpadee r√°pidamente. 

.. code-block:: C
    :emphasize-lines: 4,5,6,7,12,13,14,15

    void setup() {
        // pon tu c√≥digo de configuraci√≥n aqu√≠, para ejecutarse una vez:
        pinMode(13,OUTPUT);
        digitalWrite(13,HIGH);
        delay(1000);
        digitalWrite(13,LOW);
        delay(1000);
    }

    void loop() {
        // pon tu c√≥digo principal aqu√≠, para ejecutarse repetidamente:
        digitalWrite(13,HIGH);
        delay(200);
        digitalWrite(13,LOW);
        delay(200);
    }    

* Sketch 4: Reportar un error.

.. code-block:: C
    :emphasize-lines: 6,7,8,9

    void setup() {
        // pon tu c√≥digo de configuraci√≥n aqu√≠, para ejecutarse una vez:
        pinMode(13,OUTPUT);
    }

    digitalWrite(13,HIGH);
    delay(1000);
    digitalWrite(13,LOW);
    delay(1000);

    void loop() {
        // pon tu c√≥digo principal aqu√≠, para ejecutarse repetidamente:
    }    

Con la ayuda de estos sketches, podemos resumir varias caracter√≠sticas de ``setup-loop``.

* ``loop()`` se ejecutar√° repetidamente despu√©s de que la placa est√© encendida. 
* ``setup()`` se ejecutar√° solo una vez despu√©s de que la placa est√© encendida. 
* Despu√©s de que la placa est√© encendida, ``setup()`` se ejecutar√° primero, seguido de ``loop()``. 
* El c√≥digo debe escribirse dentro del alcance de ``{}`` de ``setup()`` o ``loop()``, fuera del marco ser√° un error.

.. note::  
    Declaraciones como ``digitalWrite(13,HIGH)`` se utilizan para controlar el LED a bordo, y hablaremos sobre su uso en detalle en cap√≠tulos posteriores.
