.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions de f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Structure d'un programme Arduino
======================================

Jetons un coup d'≈ìil au nouveau fichier sketch. Bien qu'il ne comporte que quelques lignes de code, il s'agit en fait d'un sketch "vide". 
T√©l√©verser ce sketch sur la carte de d√©veloppement ne provoquera aucune action.

.. code-block:: C

    void setup() {
    // placez votre code d'initialisation ici, il s'ex√©cutera une seule fois :

    }

    void loop() {
    // placez votre code principal ici, il s'ex√©cutera en boucle :

    }

Si nous supprimons ``setup()`` et ``loop()`` pour rendre le sketch vraiment ``vide``, vous constaterez qu'il ne passe pas la v√©rification. 
Ils sont l'√©quivalent du squelette humain et sont indispensables.

Lors de l'ex√©cution d'un sketch, ``setup()`` est ex√©cut√© en premier, et le code √† l'int√©rieur (entre les ``{}``) est ex√©cut√© apr√®s la mise sous tension ou le r√©initialisation de la carte, une seule fois. 
``loop()`` est utilis√© pour √©crire la fonctionnalit√© principale, et le code √† l'int√©rieur s'ex√©cutera en boucle apr√®s l'ex√©cution de ``setup()``.

Pour mieux comprendre ``setup()`` et ``loop()``, utilisons quatre sketches. Leur but est de faire clignoter la LED embarqu√©e de l'Arduino. Veuillez ex√©cuter chaque exp√©rience √† tour de r√¥le et noter leurs effets sp√©cifiques.

* Sketch 1 : Faire clignoter la LED embarqu√©e en continu.

.. code-block:: C
    :emphasize-lines: 8,9,10,11

    void setup() {
        // placez votre code d'initialisation ici, il s'ex√©cutera une seule fois :
        pinMode(13,OUTPUT); 
    }

    void loop() {
        // placez votre code principal ici, il s'ex√©cutera en boucle :
        digitalWrite(13,HIGH);
        delay(500);
        digitalWrite(13,LOW);
        delay(500);
    }

* Sketch 2 : Faire clignoter la LED embarqu√©e une seule fois. 

.. code-block:: C
    :emphasize-lines: 4,5,6,7

    void setup() {
        // placez votre code d'initialisation ici, il s'ex√©cutera une seule fois :
        pinMode(13,OUTPUT);
        digitalWrite(13,HIGH);
        delay(500);
        digitalWrite(13,LOW);
        delay(500);
    }

    void loop() {
        // placez votre code principal ici, il s'ex√©cutera en boucle :
    }

* Sketch 3 : Faire clignoter la LED embarqu√©e lentement une fois puis clignoter rapidement. 

.. code-block:: C
    :emphasize-lines: 4,5,6,7,12,13,14,15

    void setup() {
        // placez votre code d'initialisation ici, il s'ex√©cutera une seule fois :
        pinMode(13,OUTPUT);
        digitalWrite(13,HIGH);
        delay(1000);
        digitalWrite(13,LOW);
        delay(1000);
    }

    void loop() {
        // placez votre code principal ici, il s'ex√©cutera en boucle :
        digitalWrite(13,HIGH);
        delay(200);
        digitalWrite(13,LOW);
        delay(200);
    }    

* Sketch 4 : Provoquer une erreur.

.. code-block:: C
    :emphasize-lines: 6,7,8,9

    void setup() {
        // placez votre code d'initialisation ici, il s'ex√©cutera une seule fois :
        pinMode(13,OUTPUT);
    }

    digitalWrite(13,HIGH);
    delay(1000);
    digitalWrite(13,LOW);
    delay(1000);

    void loop() {
        // placez votre code principal ici, il s'ex√©cutera en boucle :
    }    

Avec l'aide de ces sketches, nous pouvons r√©sumer plusieurs caract√©ristiques de ``setup-loop``.

* ``loop()`` s'ex√©cutera en boucle apr√®s la mise sous tension de la carte. 
* ``setup()`` ne s'ex√©cutera qu'une seule fois apr√®s la mise sous tension de la carte. 
* Apr√®s la mise sous tension de la carte, ``setup()`` s'ex√©cutera en premier, suivi de ``loop()``. 
* Le code doit √™tre √©crit √† l'int√©rieur des accolades ``{}`` de ``setup()`` ou ``loop()``, en dehors du cadre, il y aura une erreur.

.. note::  
    Les instructions telles que ``digitalWrite(13, HIGH)`` sont utilis√©es pour contr√¥ler la LED embarqu√©e, et nous parlerons de leur utilisation en d√©tail dans les chapitres suivants.
