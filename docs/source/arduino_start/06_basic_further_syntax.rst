.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions de f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

R√®gles d'√©criture des sketches
==================================


Si vous demandez √† un ami d'allumer les lumi√®res, vous pouvez dire "Allume les lumi√®res.", ou "Lumi√®res allum√©es, mec.", vous pouvez utiliser le ton que vous voulez.

Cependant, si vous voulez que la carte Arduino fasse quelque chose pour vous, vous devez suivre les r√®gles de programmation Arduino pour taper les commandes.

Ce chapitre contient les r√®gles de base du langage Arduino et vous aidera √† comprendre comment traduire le langage naturel en code.

Bien s√ªr, c'est un processus qui prend du temps pour se familiariser, et c'est aussi la partie la plus sujette aux erreurs pour les d√©butants. Donc, si vous faites souvent des erreurs, ce n'est pas grave, essayez juste quelques fois de plus.


Point-virgule ``;``
----------------------

Tout comme l'√©criture d'une lettre, o√π vous mettez un point √† la fin de chaque phrase pour indiquer la fin, le langage Arduino exige que vous utilisiez ``;`` pour indiquer la fin de la commande.

Prenons l'exemple familier du clignotement de la LED embarqu√©e. Un sketch correct devrait ressembler √† ceci.

Exemple :

.. code-block:: C

    void setup() {
        // placez votre code d'initialisation ici, il s'ex√©cutera une seule fois :
        pinMode(13,OUTPUT); 
    }

    void loop() {
        // placez votre code principal ici, il s'ex√©cutera en boucle :
        digitalWrite(13,HIGH);
        delay(500);
        digitalWrite(13,LOW);
        delay(500);
    }

Ensuite, examinons les deux sketches suivants et devinons s'ils peuvent √™tre correctement reconnus par Arduino avant de les ex√©cuter.

Sketch A :

.. code-block:: C
    :emphasize-lines: 8,9,10,11

    void setup() {
        // placez votre code d'initialisation ici, il s'ex√©cutera une seule fois :
        pinMode(13,OUTPUT); 
    }

    void loop() {
        // placez votre code principal ici, il s'ex√©cutera en boucle :
        digitalWrite(13,HIGH)
        delay(500)
        digitalWrite(13,LOW)
        delay(500)
    }

Sketch B :

.. code-block:: C
    :emphasize-lines: 8,9,10,11,12,13,14,15,16

    void setup() {
        // placez votre code d'initialisation ici, il s'ex√©cutera une seule fois :
        pinMode(13,OUTPUT);
    }
    
    void loop() {
        // placez votre code principal ici, il s'ex√©cutera en boucle :
        digitalWrite(13,
    HIGH);  delay
        (500
        );
        digitalWrite(13,
        
        LOW);
                delay(500)
        ;
    }

Le r√©sultat est que **Sketch A** signale une erreur et que **Sketch B** fonctionne.

* Les erreurs dans **Sketch A** sont dues √† l'absence de ``;``, et bien qu'il semble normal, Arduino ne peut pas le lire.
* **Sketch B** semble inhumain, mais en fait, l'indentation, les sauts de ligne et les espaces dans les instructions sont des √©l√©ments qui n'existent pas dans les programmes Arduino. Pour le compilateur Arduino, il appara√Æt donc comme dans l'exemple.

Cependant, ne r√©digez pas votre code comme **Sketch B**, car ce sont g√©n√©ralement des personnes naturelles qui √©crivent et consultent le code, alors ne vous compliquez pas la vie.


Accolades ``{}``
--------------------

Les accolades ``{}`` sont l'un des composants principaux du langage de programmation Arduino, et elles doivent appara√Ætre par paires. 
Une meilleure convention de programmation consiste √† ins√©rer une structure n√©cessitant des accolades en tapant l'accolade droite directement apr√®s avoir tap√© l'accolade gauche, puis √† d√©placer le curseur entre les accolades pour ins√©rer l'instruction.



Commentaires ``//``
----------------------

Le commentaire est la partie du sketch que le compilateur ignore. Ils sont g√©n√©ralement utilis√©s pour expliquer le fonctionnement du programme.

Si nous √©crivons deux barres obliques adjacentes dans une ligne de code, le compilateur ignorera tout jusqu'√† la fin de la ligne.

Si nous cr√©ons un nouveau sketch, il est accompagn√© de deux commentaires, et si nous supprimons ces deux commentaires, le sketch ne sera pas affect√© de quelque mani√®re que ce soit.

.. code-block:: C
    :emphasize-lines: 2,7

    void setup() {
        // placez votre code d'initialisation ici, il s'ex√©cutera une seule fois :

    }

    void loop() {
        // placez votre code principal ici, il s'ex√©cutera en boucle :

    }


Les commentaires sont tr√®s utiles en programmation, et plusieurs usages courants sont list√©s ci-dessous.

* Usage A : Dites-vous ou dites aux autres ce que fait cette section de code.

.. code-block:: C

    void setup() {
        pinMode(13,OUTPUT);  // R√©glez le pin 13 en mode sortie, il contr√¥le la LED embarqu√©e
    }

    void loop() {
        digitalWrite(13,HIGH); // Activez la LED embarqu√©e en mettant le pin 13 √† HIGH
        delay(500); // Maintenez l'√©tat pendant 500 ms
        digitalWrite(13, LOW); // √âteignez la LED embarqu√©e
        delay(500);// Maintenez l'√©tat pendant 500 ms
    }

* Usage B : Invalidez temporairement certaines instructions (sans les supprimer) et d√©commentez-les lorsque vous avez besoin de les utiliser, ainsi vous n'avez pas besoin de les r√©√©crire. Ceci est tr√®s utile lors du d√©bogage du code et de la tentative de localisation des erreurs du programme.

.. code-block:: C
    :emphasize-lines: 3,4,5,6

    void setup() {
        pinMode(13,OUTPUT);
        // digitalWrite(13, HIGH);
        // delay(1000);
        // digitalWrite(13, LOW);
        // delay(1000);
    }

    void loop() {
        digitalWrite(13,HIGH);
        delay(200);
        digitalWrite(13,LOW);
        delay(200);
    }    

.. note:: 
    Utilisez le raccourci ``Ctrl+/`` pour vous aider √† commenter ou d√©commenter rapidement votre code.

Commentaires ``/**/``
-----------------------

M√™me utilisation que ``//`` pour les commentaires. Ce type de commentaire peut s'√©tendre sur plusieurs lignes, et une fois que le compilateur lit ``/*``, il ignore tout ce qui suit jusqu'√† ce qu'il rencontre ``*/``.

Exemple 1 :

.. code-block:: C
    :emphasize-lines: 1,8,9,10,11

    /* Clignoter */

    void setup() {
        pinMode(13,OUTPUT); 
    }

    void loop() {
        /*
        Le code suivant fera clignoter la LED embarqu√©e
        Vous pouvez modifier le nombre dans delay() pour changer la fr√©quence de clignotement
        */
        digitalWrite(13,HIGH); 
        delay(500); 
        digitalWrite(13,LOW); 
        delay(500);
    }


``#define``
--------------

C'est un outil utile en C++.

.. code-block:: C

    #define identifier token-string

Le compilateur remplace automatiquement ``identifier`` par ``token-string`` lorsqu'il le lit, ce qui est g√©n√©ralement utilis√© pour les d√©finitions de constantes.

Par exemple, voici un sketch utilisant define, ce qui am√©liore la lisibilit√© du code.

.. code-block:: C
    :emphasize-lines: 1,2

    #define ONBOARD_LED 13
    #define DELAY_TIME 500

    void setup() {
        pinMode(ONBOARD_LED,OUTPUT); 
    }

    void loop() {
        digitalWrite(ONBOARD_LED,HIGH); 
        delay(DELAY_TIME); 
        digitalWrite(ONBOARD_LED,LOW); 
        delay(DELAY_TIME);
    }

Pour le compilateur, il appara√Æt en fait comme ceci.

.. code-block:: C

    void setup() {
        pinMode(13,OUTPUT); 
    }

    void loop() {
        digitalWrite(13,HIGH); 
        delay(500); 
        digitalWrite(13,LOW); 
        delay(500);
    }

Nous pouvons voir que l'``identifier`` est remplac√© et n'existe pas √† l'int√©rieur du programme.
Par cons√©quent, il y a plusieurs pr√©cautions √† prendre lors de son utilisation.

1. Un ``token-string`` ne peut √™tre modifi√© manuellement et ne peut √™tre converti en d'autres valeurs par des calculs dans le programme.

2. √âvitez d'utiliser des symboles tels que ``;``. Par exemple :

.. code-block:: C
    :emphasize-lines: 1

    #define ONBOARD_LED 13;

    void setup() {
        pinMode(ONBOARD_LED,OUTPUT); 
    }

    void loop() {
        digitalWrite(ONBOARD_LED,HIGH); 
    }

Le compilateur le reconna√Ætra comme suit, ce qui sera signal√© comme une erreur.

.. code-block:: C
    :emphasize-lines: 2,6

    void setup() {
        pinMode(13;, OUTPUT); 
    }

    void loop() {
        digitalWrite(13;, HIGH); 
    }

.. note:: 
    Une convention de d√©nomination pour ``#define`` est de mettre l'``identifier`` en majuscules pour √©viter toute confusion avec les variables.
